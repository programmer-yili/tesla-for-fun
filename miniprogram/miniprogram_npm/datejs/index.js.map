{"version":3,"sources":["index.js","src/core/i18n.js","src/core/core.js","src/core/core-prototypes.js","src/core/sugarpak.js","src/core/format_parser.js","src/core/parsing_operators.js","src/core/parsing_translator.js","src/core/parsing_grammar.js","src/core/parser.js","src/core/extras.js","src/core/time_period.js","src/core/time_span.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AGTA,ADGA,ADGA;ADIA,AGTA,ADGA,ADGA;ADIA,AGTA,ADGA,ADGA;ADIA,AGTA,ADGA,ADGA,AGTA;AJaA,AGTA,ADGA,ADGA,AGTA;AJaA,AGTA,ADGA,ADGA,AGTA;AJaA,AGTA,ADGA,AGTA,AJYA,AGTA;AJaA,AGTA,ADGA,AGTA,AJYA,AGTA;AJaA,AGTA,ADGA,AGTA,AJYA,AGTA;AJaA,AGTA,ADGA,AGTA,AJYA,AKfA,AFMA;ADIA,ADGA,AGTA,AJYA,AKfA,AFMA;ADIA,ADGA,AGTA,AJYA,AKfA,AFMA;ADIA,ADGA,AGTA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA;ARyBA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA;ARyBA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA;ARyBA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AOrBA,ACHA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA,AQxBA;AT4BA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AQxBA,ADGA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AOrBA,AFMA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AQxBA,ALeA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AKfA,ACHA,AHSA;ADIA,ADGA,AGTA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,ACHA,AHSA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AENA,AJYA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKfA,AFMA;ADIA,AFMA,AKffile":"index.js","sourcesContent":["/**\n * @overview NPM Module index: include all the core modules, I18n files will be loaded on the fly.\n * @author Gregory Wild-Smith <gregory@wild-smith.com>\n */\nrequire(\"./src/core/i18n.js\");\nrequire(\"./src/core/core.js\");\nrequire(\"./src/core/core-prototypes.js\");\nrequire(\"./src/core/sugarpak.js\");\nrequire(\"./src/core/format_parser.js\");\nrequire(\"./src/core/parsing_operators.js\");\nrequire(\"./src/core/parsing_translator.js\");\nrequire(\"./src/core/parsing_grammar.js\");\nrequire(\"./src/core/parser.js\");\nrequire(\"./src/core/extras.js\");\nrequire(\"./src/core/time_period.js\");\nrequire(\"./src/core/time_span.js\");\n/*\n * Notice that there is no model.export or exports. This is not required as it modifies the Date object and it's prototypes.\n */","(function () {\n\tvar $D = Date;\n\tvar lang = Date.CultureStrings ? Date.CultureStrings.lang : null;\n\tvar loggedKeys = {}; // for debug purposes.\n\tvar getText = {\n\t\tgetFromKey: function (key, countryCode) {\n\t\t\tvar output;\n\t\t\tif (Date.CultureStrings && Date.CultureStrings[countryCode] && Date.CultureStrings[countryCode][key]) {\n\t\t\t\toutput = Date.CultureStrings[countryCode][key];\n\t\t\t} else {\n\t\t\t\toutput = getText.buildFromDefault(key);\n\t\t\t}\n\t\t\tif (key.charAt(0) === \"/\") { // Assume it's a regex\n\t\t\t\toutput = getText.buildFromRegex(key, countryCode);\n\t\t\t}\n\t\t\treturn output;\n\t\t},\n\t\tgetFromObjectValues: function (obj, countryCode) {\n\t\t\tvar key, output = {};\n\t\t\tfor(key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\toutput[key] = getText.getFromKey(obj[key], countryCode);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t},\n\t\tgetFromObjectKeys: function (obj, countryCode) {\n\t\t\tvar key, output = {};\n\t\t\tfor(key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\toutput[getText.getFromKey(key, countryCode)] = obj[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t},\n\t\tgetFromArray: function (arr, countryCode) {\n\t\t\tvar output = [];\n\t\t\tfor (var i=0; i < arr.length; i++){\n\t\t\t\tif (i in arr) {\n\t\t\t\t\toutput[i] = getText.getFromKey(arr[i], countryCode);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t},\n\t\tbuildFromDefault: function (key) {\n\t\t\tvar output, length, split, last;\n\t\t\tswitch(key) {\n\t\t\t\tcase \"name\":\n\t\t\t\t\toutput = \"en-US\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"englishName\":\n\t\t\t\t\toutput = \"English (United States)\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"nativeName\":\n\t\t\t\t\toutput = \"English (United States)\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"twoDigitYearMax\":\n\t\t\t\t\toutput = 2049;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"firstDayOfWeek\":\n\t\t\t\t\toutput = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\toutput = key;\n\t\t\t\t\tsplit = key.split(\"_\");\n\t\t\t\t\tlength = split.length;\n\t\t\t\t\tif (length > 1 && key.charAt(0) !== \"/\") {\n\t\t\t\t\t\t// if the key isn't a regex and it has a split.\n\t\t\t\t\t\tlast = split[(length - 1)].toLowerCase();\n\t\t\t\t\t\tif (last === \"initial\" || last === \"abbr\") {\n\t\t\t\t\t\t\toutput = split[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn output;\n\t\t},\n\t\tbuildFromRegex: function (key, countryCode) {\n\t\t\tvar output;\n\t\t\tif (Date.CultureStrings && Date.CultureStrings[countryCode] && Date.CultureStrings[countryCode][key]) {\n\t\t\t\toutput = new RegExp(Date.CultureStrings[countryCode][key], \"i\");\n\t\t\t} else {\n\t\t\t\toutput = new RegExp(key.replace(new RegExp(\"/\", \"g\"),\"\"), \"i\");\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\t};\n\n\tvar shallowMerge = function (obj1, obj2) {\n\t\tfor (var attrname in obj2) {\n\t\t\tif (obj2.hasOwnProperty(attrname)) {\n\t\t\t\tobj1[attrname] = obj2[attrname];\n\t\t\t}\n\t\t}\n\t};\n\n\tvar __ = function (key, language) {\n\t\tvar countryCode = (language) ? language : lang;\n\t\tloggedKeys[key] = key;\n\t\tif (typeof key === \"object\") {\n\t\t\tif (key instanceof Array) {\n\t\t\t\treturn getText.getFromArray(key, countryCode);\n\t\t\t} else {\n\t\t\t\treturn getText.getFromObjectKeys(key, countryCode);\n\t\t\t}\n\t\t} else {\n\t\t\treturn getText.getFromKey(key, countryCode);\n\t\t}\n\t};\n\t\n\tvar loadI18nScript = function (code) {\n\t\t// paatterned after jQuery's getScript.\n\t\tvar url = Date.Config.i18n + code + \".js\";\n\t\tvar head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\t\tvar script = document.createElement(\"script\");\n\t\tscript.src = url;\n\n\t\tvar completed = false;\n\t\tvar events = {\n\t\t\tdone: function (){} // placeholder function\n\t\t};\n\t\t// Attach handlers for all browsers\n\t\tscript.onload = script.onreadystatechange = function() {\n\t\t\tif ( !completed && (!this.readyState || this.readyState === \"loaded\" || this.readyState === \"complete\") ) {\n\t\t\t\tevents.done();\n\t\t\t\thead.removeChild(script);\n\t\t\t}\n\t\t};\n\n\t\tsetTimeout(function() {\n\t\t\thead.insertBefore(script, head.firstChild);\n\t\t}, 0); // allows return to execute first\n\t\t\n\t\treturn {\n\t\t\tdone: function (cb) {\n\t\t\t\tevents.done = function() {\n\t\t\t\t\tif (cb) {\n\t\t\t\t\t\tsetTimeout(cb,0);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t};\n\n\tvar buildInfo = {\n\t\tbuildFromMethodHash: function (obj) {\n\t\t\tvar key;\n\t\t\tfor(key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\tobj[key] = buildInfo[obj[key]]();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t\ttimeZoneDST: function () {\n\t\t\tvar DST = {\n\t\t\t\t\"CHADT\": \"+1345\",\n\t\t\t\t\"NZDT\": \"+1300\",\n\t\t\t\t\"AEDT\": \"+1100\",\n\t\t\t\t\"ACDT\": \"+1030\",\n\t\t\t\t\"AZST\": \"+0500\",\n\t\t\t\t\"IRDT\": \"+0430\",\n\t\t\t\t\"EEST\": \"+0300\",\n\t\t\t\t\"CEST\": \"+0200\",\n\t\t\t\t\"BST\": \"+0100\",\n\t\t\t\t\"PMDT\": \"-0200\",\n\t\t\t\t\"ADT\": \"-0300\",\n\t\t\t\t\"NDT\": \"-0230\",\n\t\t\t\t\"EDT\": \"-0400\",\n\t\t\t\t\"CDT\": \"-0500\",\n\t\t\t\t\"MDT\": \"-0600\",\n\t\t\t\t\"PDT\": \"-0700\",\n\t\t\t\t\"AKDT\": \"-0800\",\n\t\t\t\t\"HADT\": \"-0900\"\n\t\t\t};\n\t\t\treturn __(DST);\n\t\t},\n\t\ttimeZoneStandard: function () {\n\t\t\tvar standard = {\n\t\t\t\t\"LINT\": \"+1400\",\n\t\t\t\t\"TOT\": \"+1300\",\n\t\t\t\t\"CHAST\": \"+1245\",\n\t\t\t\t\"NZST\": \"+1200\",\n\t\t\t\t\"NFT\": \"+1130\",\n\t\t\t\t\"SBT\": \"+1100\",\n\t\t\t\t\"AEST\": \"+1000\",\n\t\t\t\t\"ACST\": \"+0930\",\n\t\t\t\t\"JST\": \"+0900\",\n\t\t\t\t\"CWST\": \"+0845\",\n\t\t\t\t\"CT\": \"+0800\",\n\t\t\t\t\"ICT\": \"+0700\",\n\t\t\t\t\"MMT\": \"+0630\",\n\t\t\t\t\"BST\": \"+0600\",\n\t\t\t\t\"NPT\": \"+0545\",\n\t\t\t\t\"IST\": \"+0530\",\n\t\t\t\t\"PKT\": \"+0500\",\n\t\t\t\t\"AFT\": \"+0430\",\n\t\t\t\t\"MSK\": \"+0400\",\n\t\t\t\t\"IRST\": \"+0330\",\n\t\t\t\t\"FET\": \"+0300\",\n\t\t\t\t\"EET\": \"+0200\",\n\t\t\t\t\"CET\": \"+0100\",\n\t\t\t\t\"GMT\": \"+0000\",\n\t\t\t\t\"UTC\": \"+0000\",\n\t\t\t\t\"CVT\": \"-0100\",\n\t\t\t\t\"GST\": \"-0200\",\n\t\t\t\t\"BRT\": \"-0300\",\n\t\t\t\t\"NST\": \"-0330\",\n\t\t\t\t\"AST\": \"-0400\",\n\t\t\t\t\"EST\": \"-0500\",\n\t\t\t\t\"CST\": \"-0600\",\n\t\t\t\t\"MST\": \"-0700\",\n\t\t\t\t\"PST\": \"-0800\",\n\t\t\t\t\"AKST\": \"-0900\",\n\t\t\t\t\"MIT\": \"-0930\",\n\t\t\t\t\"HST\": \"-1000\",\n\t\t\t\t\"SST\": \"-1100\",\n\t\t\t\t\"BIT\": \"-1200\"\n\t\t\t};\n\t\t\treturn __(standard);\n\t\t},\n\t\ttimeZones: function (data) {\n\t\t\tvar zone;\n\t\t\tdata.timezones = [];\n\t\t\tfor (zone in data.abbreviatedTimeZoneStandard) {\n\t\t\t\tif (data.abbreviatedTimeZoneStandard.hasOwnProperty(zone)) {\n\t\t\t\t\tdata.timezones.push({ name: zone, offset: data.abbreviatedTimeZoneStandard[zone]});\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (zone in data.abbreviatedTimeZoneDST) {\n\t\t\t\tif (data.abbreviatedTimeZoneDST.hasOwnProperty(zone)) {\n\t\t\t\t\tdata.timezones.push({ name: zone, offset: data.abbreviatedTimeZoneDST[zone], dst: true});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn data.timezones;\n\t\t},\n\t\tdays: function () {\n\t\t\treturn __([\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]);\n\t\t},\n\t\tdayAbbr: function () {\n\t\t\treturn __([\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]);\n\t\t},\n\t\tdayShortNames: function () {\n\t\t\treturn __([\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]);\n\t\t},\n\t\tdayFirstLetters: function () {\n\t\t\treturn __([\"S_Sun_Initial\", \"M_Mon_Initial\", \"T_Tues_Initial\", \"W_Wed_Initial\", \"T_Thu_Initial\", \"F_Fri_Initial\", \"S_Sat_Initial\"]);\n\t\t},\n\t\tmonths: function () {\n\t\t\treturn __([\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]);\n\t\t},\n\t\tmonthAbbr: function () {\n\t\t\treturn __([\"Jan_Abbr\", \"Feb_Abbr\", \"Mar_Abbr\", \"Apr_Abbr\", \"May_Abbr\", \"Jun_Abbr\", \"Jul_Abbr\", \"Aug_Abbr\", \"Sep_Abbr\", \"Oct_Abbr\", \"Nov_Abbr\", \"Dec_Abbr\"]);\n\t\t},\n\t\tformatPatterns: function () {\n\t\t\treturn getText.getFromObjectValues({\n\t\t\t\tshortDate: \"M/d/yyyy\",\n\t\t\t\tlongDate: \"dddd, MMMM dd, yyyy\",\n\t\t\t\tshortTime: \"h:mm tt\",\n\t\t\t\tlongTime: \"h:mm:ss tt\",\n\t\t\t\tfullDateTime: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n\t\t\t\tsortableDateTime: \"yyyy-MM-ddTHH:mm:ss\",\n\t\t\t\tuniversalSortableDateTime: \"yyyy-MM-dd HH:mm:ssZ\",\n\t\t\t\trfc1123: \"ddd, dd MMM yyyy HH:mm:ss\",\n\t\t\t\tmonthDay: \"MMMM dd\",\n\t\t\t\tyearMonth: \"MMMM, yyyy\"\n\t\t\t}, Date.i18n.currentLanguage());\n\t\t},\n\t\tregex: function () {\n\t\t\treturn getText.getFromObjectValues({\n\t\t\t\tinTheMorning: \"/( in the )(morn(ing)?)\\\\b/\",\n\t\t\t\tthisMorning: \"/(this )(morn(ing)?)\\\\b/\",\n\t\t\t\tamThisMorning: \"/(\\b\\\\d(am)? )(this )(morn(ing)?)/\",\n\t\t\t\tinTheEvening: \"/( in the )(even(ing)?)\\\\b/\",\n\t\t\t\tthisEvening: \"/(this )(even(ing)?)\\\\b/\",\n\t\t\t\tpmThisEvening: \"/(\\b\\\\d(pm)? )(this )(even(ing)?)/\",\n\t\t\t\tjan: \"/jan(uary)?/\",\n\t\t\t\tfeb: \"/feb(ruary)?/\",\n\t\t\t\tmar: \"/mar(ch)?/\",\n\t\t\t\tapr: \"/apr(il)?/\",\n\t\t\t\tmay: \"/may/\",\n\t\t\t\tjun: \"/jun(e)?/\",\n\t\t\t\tjul: \"/jul(y)?/\",\n\t\t\t\taug: \"/aug(ust)?/\",\n\t\t\t\tsep: \"/sep(t(ember)?)?/\",\n\t\t\t\toct: \"/oct(ober)?/\",\n\t\t\t\tnov: \"/nov(ember)?/\",\n\t\t\t\tdec: \"/dec(ember)?/\",\n\t\t\t\tsun: \"/^su(n(day)?)?/\",\n\t\t\t\tmon: \"/^mo(n(day)?)?/\",\n\t\t\t\ttue: \"/^tu(e(s(day)?)?)?/\",\n\t\t\t\twed: \"/^we(d(nesday)?)?/\",\n\t\t\t\tthu: \"/^th(u(r(s(day)?)?)?)?/\",\n\t\t\t\tfri: \"/fr(i(day)?)?/\",\n\t\t\t\tsat: \"/^sa(t(urday)?)?/\",\n\t\t\t\tfuture: \"/^next/\",\n\t\t\t\tpast: \"/^last|past|prev(ious)?/\",\n\t\t\t\tadd: \"/^(\\\\+|aft(er)?|from|hence)/\",\n\t\t\t\tsubtract: \"/^(\\\\-|bef(ore)?|ago)/\",\n\t\t\t\tyesterday: \"/^yes(terday)?/\",\n\t\t\t\ttoday: \"/^t(od(ay)?)?/\",\n\t\t\t\ttomorrow: \"/^tom(orrow)?/\",\n\t\t\t\tnow: \"/^n(ow)?/\",\n\t\t\t\tmillisecond: \"/^ms|milli(second)?s?/\",\n\t\t\t\tsecond: \"/^sec(ond)?s?/\",\n\t\t\t\tminute: \"/^mn|min(ute)?s?/\",\n\t\t\t\thour: \"/^h(our)?s?/\",\n\t\t\t\tweek: \"/^w(eek)?s?/\",\n\t\t\t\tmonth: \"/^m(onth)?s?/\",\n\t\t\t\tday: \"/^d(ay)?s?/\",\n\t\t\t\tyear: \"/^y(ear)?s?/\",\n\t\t\t\tshortMeridian: \"/^(a|p)/\",\n\t\t\t\tlongMeridian: \"/^(a\\\\.?m?\\\\.?|p\\\\.?m?\\\\.?)/\",\n\t\t\t\ttimezone: \"/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\\\\s*(\\\\+|\\\\-)\\\\s*\\\\d\\\\d\\\\d\\\\d?)|gmt|utc)/\",\n\t\t\t\tordinalSuffix: \"/^\\\\s*(st|nd|rd|th)/\",\n\t\t\t\ttimeContext: \"/^\\\\s*(\\\\:|a(?!u|p)|p)/\"\n\t\t\t}, Date.i18n.currentLanguage());\n\t\t}\n\t};\n\n\tvar CultureInfo = function () {\n\t\tvar info = getText.getFromObjectValues({\n\t\t\tname: \"name\",\n\t\t\tenglishName: \"englishName\",\n\t\t\tnativeName: \"nativeName\",\n\t\t\tamDesignator: \"AM\",\n\t\t\tpmDesignator: \"PM\",\n\t\t\tfirstDayOfWeek: \"firstDayOfWeek\",\n\t\t\ttwoDigitYearMax: \"twoDigitYearMax\",\n\t\t\tdateElementOrder: \"mdy\"\n\t\t}, Date.i18n.currentLanguage());\n\n\t\tvar constructedInfo = buildInfo.buildFromMethodHash({\n\t\t\tdayNames: \"days\",\n\t\t\tabbreviatedDayNames: \"dayAbbr\",\n\t\t\tshortestDayNames: \"dayShortNames\",\n\t\t\tfirstLetterDayNames: \"dayFirstLetters\",\n\t\t\tmonthNames: \"months\",\n\t\t\tabbreviatedMonthNames: \"monthAbbr\",\n\t\t\tformatPatterns: \"formatPatterns\",\n\t\t\tregexPatterns: \"regex\",\n\t\t\tabbreviatedTimeZoneDST: \"timeZoneDST\",\n\t\t\tabbreviatedTimeZoneStandard: \"timeZoneStandard\"\n\t\t});\n\n\t\tshallowMerge(info, constructedInfo);\n\t\tbuildInfo.timeZones(info);\n\t\treturn info;\n\t};\n\n\t$D.i18n = {\n\t\t__: function (key, lang) {\n\t\t\treturn __(key, lang);\n\t\t},\n\t\tcurrentLanguage: function () {\n\t\t\treturn lang || \"en-US\";\n\t\t},\n\t\tsetLanguage: function (code, force, cb) {\n\t\t\tvar async = false;\n\t\t\tif (force || code === \"en-US\" || (!!Date.CultureStrings && !!Date.CultureStrings[code])) {\n\t\t\t\tlang = code;\n\t\t\t\tDate.CultureStrings = Date.CultureStrings || {};\n\t\t\t\tDate.CultureStrings.lang = code;\n\t\t\t\tDate.CultureInfo = new CultureInfo();\n\t\t\t} else {\n\t\t\t\tif (!(!!Date.CultureStrings && !!Date.CultureStrings[code])) {\n\t\t\t\t\tif (typeof exports !== \"undefined\" && this.exports !== exports) {\n\t\t\t\t\t\t// we're in a Node enviroment, load it using require\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\trequire(\"../i18n/\" + code + \".js\");\n\t\t\t\t\t\t\tlang = code;\n\t\t\t\t\t\t\tDate.CultureStrings.lang = code;\n\t\t\t\t\t\t\tDate.CultureInfo = new CultureInfo();\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// var str = \"The language for '\" + code + \"' could not be loaded by Node. It likely does not exist.\";\n\t\t\t\t\t\t\tthrow new Error(\"The DateJS IETF language tag '\" + code + \"' could not be loaded by Node. It likely does not exist.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (Date.Config && Date.Config.i18n) {\n\t\t\t\t\t\t// we know the location of the files, so lets load them\t\t\t\t\t\n\t\t\t\t\t\tasync = true;\n\t\t\t\t\t\tloadI18nScript(code).done(function(){\n\t\t\t\t\t\t\tlang = code;\n\t\t\t\t\t\t\tDate.CultureStrings = Date.CultureStrings || {};\n\t\t\t\t\t\t\tDate.CultureStrings.lang = code;\n\t\t\t\t\t\t\tDate.CultureInfo = new CultureInfo();\n\t\t\t\t\t\t\t$D.Parsing.Normalizer.buildReplaceData(); // because this is async\n\t\t\t\t\t\t\tif ($D.Grammar) {\n\t\t\t\t\t\t\t\t$D.Grammar.buildGrammarFormats(); // so we can parse those strings...\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (cb) {\n\t\t\t\t\t\t\t\tsetTimeout(cb,0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tDate.console.error(\"The DateJS IETF language tag '\" + code + \"' is not available and has not been loaded.\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$D.Parsing.Normalizer.buildReplaceData(); // rebuild normalizer strings\n\t\t\tif ($D.Grammar) {\n\t\t\t\t$D.Grammar.buildGrammarFormats(); // so we can parse those strings...\n\t\t\t}\n\t\t\tif (!async && cb) {\n\t\t\t\tsetTimeout(cb,0);\n\t\t\t}\n\t\t},\n\t\tgetLoggedKeys: function () {\n\t\t\treturn loggedKeys;\n\t\t},\n\t\tupdateCultureInfo: function () {\n\t\t\tDate.CultureInfo = new CultureInfo();\n\t\t}\n\t};\n\t$D.i18n.updateCultureInfo(); // run automatically\n}());","(function () {\n\tvar $D = Date,\n\t\t$P = $D.prototype,\n\t\tp = function (s, l) {\n\t\t\tif (!l) {\n\t\t\t\tl = 2;\n\t\t\t}\n\t\t\treturn (\"000\" + s).slice(l * -1);\n\t\t};\n\t\n\tif (typeof window !== \"undefined\" && typeof window.console !== \"undefined\" && typeof window.console.log !== \"undefined\") {\n\t\t$D.console = console; // used only to raise non-critical errors if available\n\t} else {\n\t\t// set mock so we don't give errors.\n\t\t$D.console = {\n\t\t\tlog: function(){},\n\t\t\terror: function(){}\n\t\t};\n\t}\n\t$D.Config = $D.Config || {};\n\n\t$D.initOverloads = function() {\n\t\t/** \n\t\t * Overload of Date.now. Allows an alternate call for Date.now where it returns the \n\t\t * current Date as an object rather than just milliseconds since the Unix Epoch.\n\t\t *\n\t\t * Also provides an implementation of now() for browsers (IE<9) that don't have it.\n\t\t * \n\t\t * Backwards compatible so with work with either:\n\t\t *  Date.now() [returns ms]\n\t\t * or\n\t\t *  Date.now(true) [returns Date]\n\t\t */\n\t\tif (!$D.now) {\n\t\t\t$D._now = function now() {\n\t\t\t\treturn new Date().getTime();\n\t\t\t};\n\t\t} else if (!$D._now) {\n\t\t\t$D._now = $D.now;\n\t\t}\n\n\t\t$D.now = function (returnObj) {\n\t\t\tif (returnObj) {\n\t\t\t\treturn $D.present();\n\t\t\t} else {\n\t\t\t\treturn $D._now();\n\t\t\t}\n\t\t};\n\n\t\tif ( !$P.toISOString ) {\n\t\t\t$P.toISOString = function() {\n\t\t\t\treturn this.getUTCFullYear() +\n\t\t\t\t\"-\" + p(this.getUTCMonth() + 1) +\n\t\t\t\t\"-\" + p(this.getUTCDate()) +\n\t\t\t\t\"T\" + p(this.getUTCHours()) +\n\t\t\t\t\":\" + p(this.getUTCMinutes()) +\n\t\t\t\t\":\" + p(this.getUTCSeconds()) +\n\t\t\t\t\".\" + String( (this.getUTCMilliseconds()/1000).toFixed(3)).slice(2, 5) +\n\t\t\t\t\"Z\";\n\t\t\t};\n\t\t}\n\t\t\n\t\t// private\n\t\tif ( $P._toString === undefined ){\n\t\t\t$P._toString = $P.toString;\n\t\t}\n\n\t};\n\t$D.initOverloads();\n\n\n\t/** \n\t * Gets a date that is set to the current date. The time is set to the start of the day (00:00 or 12:00 AM).\n\t * @return {Date}    The current date.\n\t */\n\t$D.today = function () {\n\t\treturn new Date().clearTime();\n\t};\n\n\t/** \n\t * Gets a date that is set to the current date and time (same as new Date, but chainable)\n\t * @return {Date}    The current date.\n\t */\n\t$D.present = function () {\n\t\treturn new Date();\n\t};\n\n\t/**\n\t * Compares the first date to the second date and returns an number indication of their relative values.  \n\t * @param {Date}     First Date object to compare [Required].\n\t * @param {Date}     Second Date object to compare to [Required].\n\t * @return {Number}  -1 = date1 is lessthan date2. 0 = values are equal. 1 = date1 is greaterthan date2.\n\t */\n\t$D.compare = function (date1, date2) {\n\t\tif (isNaN(date1) || isNaN(date2)) {\n\t\t\tthrow new Error(date1 + \" - \" + date2);\n\t\t} else if (date1 instanceof Date && date2 instanceof Date) {\n\t\t\treturn (date1 < date2) ? -1 : (date1 > date2) ? 1 : 0;\n\t\t} else {\n\t\t\tthrow new TypeError(date1 + \" - \" + date2);\n\t\t}\n\t};\n\t\n\t/**\n\t * Compares the first Date object to the second Date object and returns true if they are equal.  \n\t * @param {Date}     First Date object to compare [Required]\n\t * @param {Date}     Second Date object to compare to [Required]\n\t * @return {Boolean} true if dates are equal. false if they are not equal.\n\t */\n\t$D.equals = function (date1, date2) {\n\t\treturn (date1.compareTo(date2) === 0);\n\t};\n\n\t/**\n\t * Gets the language appropriate day name when given the day number(0-6)\n\t * eg - 0 == Sunday\n\t * @return {String}  The day name\n\t */\n\t$D.getDayName = function (n) {\n\t\treturn Date.CultureInfo.dayNames[n];\n\t};\n\n\t/**\n\t * Gets the day number (0-6) if given a CultureInfo specific string which is a valid dayName, abbreviatedDayName or shortestDayName (two char).\n\t * @param {String}   The name of the day (eg. \"Monday, \"Mon\", \"tuesday\", \"tue\", \"We\", \"we\").\n\t * @return {Number}  The day number\n\t */\n\t$D.getDayNumberFromName = function (name) {\n\t\tvar n = Date.CultureInfo.dayNames, m = Date.CultureInfo.abbreviatedDayNames, o = Date.CultureInfo.shortestDayNames, s = name.toLowerCase();\n\t\tfor (var i = 0; i < n.length; i++) {\n\t\t\tif (n[i].toLowerCase() === s || m[i].toLowerCase() === s || o[i].toLowerCase() === s) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\t\n\t/**\n\t * Gets the month number (0-11) if given a Culture Info specific string which is a valid monthName or abbreviatedMonthName.\n\t * @param {String}   The name of the month (eg. \"February, \"Feb\", \"october\", \"oct\").\n\t * @return {Number}  The day number\n\t */\n\t$D.getMonthNumberFromName = function (name) {\n\t\tvar n = Date.CultureInfo.monthNames, m = Date.CultureInfo.abbreviatedMonthNames, s = name.toLowerCase();\n\t\tfor (var i = 0; i < n.length; i++) {\n\t\t\tif (n[i].toLowerCase() === s || m[i].toLowerCase() === s) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\n\t/**\n\t * Gets the language appropriate month name when given the month number(0-11)\n\t * eg - 0 == January\n\t * @return {String}  The month name\n\t */\n\t$D.getMonthName = function (n) {\n\t\treturn Date.CultureInfo.monthNames[n];\n\t};\n\n\t/**\n\t * Determines if the current date instance is within a LeapYear.\n\t * @param {Number}   The year.\n\t * @return {Boolean} true if date is within a LeapYear, otherwise false.\n\t */\n\t$D.isLeapYear = function (year) {\n\t\treturn ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);\n\t};\n\n\t/**\n\t * Gets the number of days in the month, given a year and month value. Automatically corrects for LeapYear.\n\t * @param {Number}   The year.\n\t * @param {Number}   The month (0-11).\n\t * @return {Number}  The number of days in the month.\n\t */\n\t$D.getDaysInMonth = function (year, month) {\n\t\tif (!month && $D.validateMonth(year)) {\n\t\t\t\tmonth = year;\n\t\t\t\tyear = Date.today().getFullYear();\n\t\t}\n\t\treturn [31, ($D.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\n\t};\n\n\t$P.getDaysInMonth = function () {\n\t\treturn $D.getDaysInMonth(this.getFullYear(), this.getMonth());\n\t};\n \n\t$D.getTimezoneAbbreviation = function (offset, dst) {\n\t\tvar p, n = (dst || false) ? Date.CultureInfo.abbreviatedTimeZoneDST : Date.CultureInfo.abbreviatedTimeZoneStandard;\n\t\tfor (p in n) {\n\t\t\tif (n.hasOwnProperty(p)) {\n\t\t\t\tif (n[p] === offset) {\n\t\t\t\t\treturn p;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t\n\t$D.getTimezoneOffset = function (name, dst) {\n\t\tvar i, a =[], z = Date.CultureInfo.timezones;\n\t\tif (!name) { name = (new Date()).getTimezone();}\n\t\tfor (i = 0; i < z.length; i++) {\n\t\t\tif (z[i].name === name.toUpperCase()) {\n\t\t\t\ta.push(i);\n\t\t\t}\n\t\t}\n\t\tif (!z[a[0]]) {\n\t\t\treturn null;\n\t\t}\n\t\tif (a.length === 1 || !dst) {\n\t\t\treturn z[a[0]].offset;\n\t\t} else {\n\t\t\tfor (i=0; i < a.length; i++) {\n\t\t\t\tif (z[a[i]].dst) {\n\t\t\t\t\treturn z[a[i]].offset;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t$D.getQuarter = function (d) {\n\t\td = d || new Date(); // If no date supplied, use today\n\t\tvar q = [1,2,3,4];\n\t\treturn q[Math.floor(d.getMonth() / 3)]; // ~~~ is a bitwise op. Faster than Math.floor\n\t};\n\n\t$D.getDaysLeftInQuarter = function (d) {\n\t\td = d || new Date();\n\t\tvar qEnd = new Date(d);\n\t\tqEnd.setMonth(qEnd.getMonth() + 3 - qEnd.getMonth() % 3, 0);\n\t\treturn Math.floor((qEnd - d) / 8.64e7);\n\t};\n\n\t// private\n\tvar validate = function (n, min, max, name) {\n\t\tname = name ? name : \"Object\";\n\t\tif (typeof n === \"undefined\") {\n\t\t\treturn false;\n\t\t} else if (typeof n !== \"number\") {\n\t\t\tthrow new TypeError(n + \" is not a Number.\");\n\t\t} else if (n < min || n > max) {\n\t\t\t// As failing validation is *not* an exceptional circumstance \n\t\t\t// lets not throw a RangeError Exception here. \n\t\t\t// It's semantically correct but it's not sensible.\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\t/**\n\t * Validates the number is within an acceptable range for milliseconds [0-999].\n\t * @param {Number}   The number to check if within range.\n\t * @return {Boolean} true if within range, otherwise false.\n\t */\n\t$D.validateMillisecond = function (value) {\n\t\treturn validate(value, 0, 999, \"millisecond\");\n\t};\n\n\t/**\n\t * Validates the number is within an acceptable range for seconds [0-59].\n\t * @param {Number}   The number to check if within range.\n\t * @return {Boolean} true if within range, otherwise false.\n\t */\n\t$D.validateSecond = function (value) {\n\t\treturn validate(value, 0, 59, \"second\");\n\t};\n\n\t/**\n\t * Validates the number is within an acceptable range for minutes [0-59].\n\t * @param {Number}   The number to check if within range.\n\t * @return {Boolean} true if within range, otherwise false.\n\t */\n\t$D.validateMinute = function (value) {\n\t\treturn validate(value, 0, 59, \"minute\");\n\t};\n\n\t/**\n\t * Validates the number is within an acceptable range for hours [0-23].\n\t * @param {Number}   The number to check if within range.\n\t * @return {Boolean} true if within range, otherwise false.\n\t */\n\t$D.validateHour = function (value) {\n\t\treturn validate(value, 0, 23, \"hour\");\n\t};\n\n\t/**\n\t * Validates the number is within an acceptable range for the days in a month [0-MaxDaysInMonth].\n\t * @param {Number}   The number to check if within range.\n\t * @return {Boolean} true if within range, otherwise false.\n\t */\n\t$D.validateDay = function (value, year, month) {\n\t\tif (year === undefined || year === null || month === undefined || month === null) { return false;}\n\t\treturn validate(value, 1, $D.getDaysInMonth(year, month), \"day\");\n\t};\n\n\t/**\n\t * Validates the number is within an acceptable range for months [0-11].\n\t * @param {Number}   The number to check if within range.\n\t * @return {Boolean} true if within range, otherwise false.\n\t */\n\t$D.validateWeek = function (value) {\n\t\treturn validate(value, 0, 53, \"week\");\n\t};\n\n\t/**\n\t * Validates the number is within an acceptable range for months [0-11].\n\t * @param {Number}   The number to check if within range.\n\t * @return {Boolean} true if within range, otherwise false.\n\t */\n\t$D.validateMonth = function (value) {\n\t\treturn validate(value, 0, 11, \"month\");\n\t};\n\n\t/**\n\t * Validates the number is within an acceptable range for years.\n\t * @param {Number}   The number to check if within range.\n\t * @return {Boolean} true if within range, otherwise false.\n\t */\n\t$D.validateYear = function (value) {\n\t\t/**\n\t\t * Per ECMAScript spec the range of times supported by Date objects is \n\t\t * exactly -100,000,000 days to +100,000,000 days measured relative to \n\t\t * midnight at the beginning of 01 January, 1970 UTC. \n\t\t * This gives a range of 8,640,000,000,000,000 milliseconds to either \n\t\t * side of 01 January, 1970 UTC.\n\t\t *\n\t\t * Earliest possible date: Tue, 20 Apr 271,822 B.C. 00:00:00 UTC\n\t\t * Latest possible date: Sat, 13 Sep 275,760 00:00:00 UTC\n\t\t */\n\t\treturn validate(value, -271822, 275760, \"year\");\n\t};\n\t$D.validateTimezone = function(value) {\n\t\tvar timezones = {\"ACDT\":1,\"ACST\":1,\"ACT\":1,\"ADT\":1,\"AEDT\":1,\"AEST\":1,\"AFT\":1,\"AKDT\":1,\"AKST\":1,\"AMST\":1,\"AMT\":1,\"ART\":1,\"AST\":1,\"AWDT\":1,\"AWST\":1,\"AZOST\":1,\"AZT\":1,\"BDT\":1,\"BIOT\":1,\"BIT\":1,\"BOT\":1,\"BRT\":1,\"BST\":1,\"BTT\":1,\"CAT\":1,\"CCT\":1,\"CDT\":1,\"CEDT\":1,\"CEST\":1,\"CET\":1,\"CHADT\":1,\"CHAST\":1,\"CHOT\":1,\"ChST\":1,\"CHUT\":1,\"CIST\":1,\"CIT\":1,\"CKT\":1,\"CLST\":1,\"CLT\":1,\"COST\":1,\"COT\":1,\"CST\":1,\"CT\":1,\"CVT\":1,\"CWST\":1,\"CXT\":1,\"DAVT\":1,\"DDUT\":1,\"DFT\":1,\"EASST\":1,\"EAST\":1,\"EAT\":1,\"ECT\":1,\"EDT\":1,\"EEDT\":1,\"EEST\":1,\"EET\":1,\"EGST\":1,\"EGT\":1,\"EIT\":1,\"EST\":1,\"FET\":1,\"FJT\":1,\"FKST\":1,\"FKT\":1,\"FNT\":1,\"GALT\":1,\"GAMT\":1,\"GET\":1,\"GFT\":1,\"GILT\":1,\"GIT\":1,\"GMT\":1,\"GST\":1,\"GYT\":1,\"HADT\":1,\"HAEC\":1,\"HAST\":1,\"HKT\":1,\"HMT\":1,\"HOVT\":1,\"HST\":1,\"ICT\":1,\"IDT\":1,\"IOT\":1,\"IRDT\":1,\"IRKT\":1,\"IRST\":1,\"IST\":1,\"JST\":1,\"KGT\":1,\"KOST\":1,\"KRAT\":1,\"KST\":1,\"LHST\":1,\"LINT\":1,\"MAGT\":1,\"MART\":1,\"MAWT\":1,\"MDT\":1,\"MET\":1,\"MEST\":1,\"MHT\":1,\"MIST\":1,\"MIT\":1,\"MMT\":1,\"MSK\":1,\"MST\":1,\"MUT\":1,\"MVT\":1,\"MYT\":1,\"NCT\":1,\"NDT\":1,\"NFT\":1,\"NPT\":1,\"NST\":1,\"NT\":1,\"NUT\":1,\"NZDT\":1,\"NZST\":1,\"OMST\":1,\"ORAT\":1,\"PDT\":1,\"PET\":1,\"PETT\":1,\"PGT\":1,\"PHOT\":1,\"PHT\":1,\"PKT\":1,\"PMDT\":1,\"PMST\":1,\"PONT\":1,\"PST\":1,\"PYST\":1,\"PYT\":1,\"RET\":1,\"ROTT\":1,\"SAKT\":1,\"SAMT\":1,\"SAST\":1,\"SBT\":1,\"SCT\":1,\"SGT\":1,\"SLST\":1,\"SRT\":1,\"SST\":1,\"SYOT\":1,\"TAHT\":1,\"THA\":1,\"TFT\":1,\"TJT\":1,\"TKT\":1,\"TLT\":1,\"TMT\":1,\"TOT\":1,\"TVT\":1,\"UCT\":1,\"ULAT\":1,\"UTC\":1,\"UYST\":1,\"UYT\":1,\"UZT\":1,\"VET\":1,\"VLAT\":1,\"VOLT\":1,\"VOST\":1,\"VUT\":1,\"WAKT\":1,\"WAST\":1,\"WAT\":1,\"WEDT\":1,\"WEST\":1,\"WET\":1,\"WST\":1,\"YAKT\":1,\"YEKT\":1,\"Z\":1};\n\t\treturn (timezones[value] === 1);\n\t};\n\t$D.validateTimezoneOffset= function(value) {\n\t\t// timezones go from +14hrs to -12hrs, the +X hours are negative offsets.\n\t\treturn (value > -841 && value < 721);\n\t};\n\n}());\n","(function () {\n\tvar $D = Date,\n\t\t$P = $D.prototype,\n\t\tp = function (s, l) {\n\t\t\tif (!l) {\n\t\t\t\tl = 2;\n\t\t\t}\n\t\t\treturn (\"000\" + s).slice(l * -1);\n\t\t};\n\n\tvar validateConfigObject = function (obj) {\n\t\tvar result = {}, self = this, prop, testFunc;\n\t\ttestFunc = function (prop, func, value) {\n\t\t\tif (prop === \"day\") {\n\t\t\t\tvar month = (obj.month !== undefined) ? obj.month : self.getMonth();\n\t\t\t\tvar year = (obj.year !== undefined) ? obj.year : self.getFullYear();\n\t\t\t\treturn $D[func](value, year, month);\n\t\t\t} else {\n\t\t\t\treturn $D[func](value);\n\t\t\t}\n\t\t};\n\t\tfor (prop in obj) {\n\t\t\tif (hasOwnProperty.call(obj, prop)) {\n\t\t\t\tvar func = \"validate\" + prop.charAt(0).toUpperCase() + prop.slice(1);\n\n\t\t\t\tif ($D[func] && obj[prop] !== null && testFunc(prop, func, obj[prop])) {\n\t\t\t\t\tresult[prop] = obj[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t/**\n\t * Resets the time of this Date object to 12:00 AM (00:00), which is the start of the day.\n\t * @param {Boolean}  .clone() this date instance before clearing Time\n\t * @return {Date}    this\n\t */\n\t$P.clearTime = function () {\n\t\tthis.setHours(0);\n\t\tthis.setMinutes(0);\n\t\tthis.setSeconds(0);\n\t\tthis.setMilliseconds(0);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Resets the time of this Date object to the current time ('now').\n\t * @return {Date}    this\n\t */\n\t$P.setTimeToNow = function () {\n\t\tvar n = new Date();\n\t\tthis.setHours(n.getHours());\n\t\tthis.setMinutes(n.getMinutes());\n\t\tthis.setSeconds(n.getSeconds());\n\t\tthis.setMilliseconds(n.getMilliseconds());\n\t\treturn this;\n\t};\n\t/**\n\t * Returns a new Date object that is an exact date and time copy of the original instance.\n\t * @return {Date}    A new Date instance\n\t */\n\t$P.clone = function () {\n\t\treturn new Date(this.getTime());\n\t};\n\n\t/**\n\t * Compares this instance to a Date object and returns an number indication of their relative values.  \n\t * @param {Date}     Date object to compare [Required]\n\t * @return {Number}  -1 = this is lessthan date. 0 = values are equal. 1 = this is greaterthan date.\n\t */\n\t$P.compareTo = function (date) {\n\t\treturn Date.compare(this, date);\n\t};\n\n\t/**\n\t * Compares this instance to another Date object and returns true if they are equal.  \n\t * @param {Date}     Date object to compare. If no date to compare, new Date() [now] is used.\n\t * @return {Boolean} true if dates are equal. false if they are not equal.\n\t */\n\t$P.equals = function (date) {\n\t\treturn Date.equals(this, (date !== undefined ? date : new Date()));\n\t};\n\n\t/**\n\t * Determines if this instance is between a range of two dates or equal to either the start or end dates.\n\t * @param {Date}     Start of range [Required]\n\t * @param {Date}     End of range [Required]\n\t * @return {Boolean} true is this is between or equal to the start and end dates, else false\n\t */\n\t$P.between = function (start, end) {\n\t\treturn this.getTime() >= start.getTime() && this.getTime() <= end.getTime();\n\t};\n\n\t/**\n\t * Determines if this date occurs after the date to compare to.\n\t * @param {Date}     Date object to compare. If no date to compare, new Date() (\"now\") is used.\n\t * @return {Boolean} true if this date instance is greater than the date to compare to (or \"now\"), otherwise false.\n\t */\n\t$P.isAfter = function (date) {\n\t\treturn this.compareTo(date || new Date()) === 1;\n\t};\n\n\t/**\n\t * Determines if this date occurs before the date to compare to.\n\t * @param {Date}     Date object to compare. If no date to compare, new Date() (\"now\") is used.\n\t * @return {Boolean} true if this date instance is less than the date to compare to (or \"now\").\n\t */\n\t$P.isBefore = function (date) {\n\t\treturn (this.compareTo(date || new Date()) === -1);\n\t};\n\n\t/**\n\t * Determines if the current Date instance occurs today.\n\t * @return {Boolean} true if this date instance is 'today', otherwise false.\n\t */\n\t\n\t/**\n\t * Determines if the current Date instance occurs on the same Date as the supplied 'date'. \n\t * If no 'date' to compare to is provided, the current Date instance is compared to 'today'. \n\t * @param {date}     Date object to compare. If no date to compare, the current Date (\"now\") is used.\n\t * @return {Boolean} true if this Date instance occurs on the same Day as the supplied 'date'.\n\t */\n\t$P.isToday = $P.isSameDay = function (date) {\n\t\treturn this.clone().clearTime().equals((date || new Date()).clone().clearTime());\n\t};\n\t\n\t/**\n\t * Adds the specified number of milliseconds to this instance. \n\t * @param {Number}   The number of milliseconds to add. The number can be positive or negative [Required]\n\t * @return {Date}    this\n\t */\n\t$P.addMilliseconds = function (value) {\n\t\tif (!value) { return this; }\n\t\tthis.setTime(this.getTime() + value * 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Adds the specified number of seconds to this instance. \n\t * @param {Number}   The number of seconds to add. The number can be positive or negative [Required]\n\t * @return {Date}    this\n\t */\n\t$P.addSeconds = function (value) {\n\t\tif (!value) { return this; }\n\t\treturn this.addMilliseconds(value * 1000);\n\t};\n\n\t/**\n\t * Adds the specified number of seconds to this instance. \n\t * @param {Number}   The number of seconds to add. The number can be positive or negative [Required]\n\t * @return {Date}    this\n\t */\n\t$P.addMinutes = function (value) {\n\t\tif (!value) { return this; }\n\t\treturn this.addMilliseconds(value * 60000); // 60*1000\n\t};\n\n\t/**\n\t * Adds the specified number of hours to this instance. \n\t * @param {Number}   The number of hours to add. The number can be positive or negative [Required]\n\t * @return {Date}    this\n\t */\n\t$P.addHours = function (value) {\n\t\tif (!value) { return this; }\n\t\treturn this.addMilliseconds(value * 3600000); // 60*60*1000\n\t};\n\n\t/**\n\t * Adds the specified number of days to this instance. \n\t * @param {Number}   The number of days to add. The number can be positive or negative [Required]\n\t * @return {Date}    this\n\t */\n\t$P.addDays = function (value) {\n\t\tif (!value) { return this; }\n\t\tthis.setDate(this.getDate() + value * 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Adds the specified number of weekdays (ie - not sat or sun) to this instance. \n\t * @param {Number}   The number of days to add. The number can be positive or negative [Required]\n\t * @return {Date}    this\n\t */\n\t$P.addWeekdays = function (value) {\n\t\tif (!value) { return this; }\n\t\tvar day = this.getDay();\n\t\tvar weeks = (Math.ceil(Math.abs(value)/7));\n\t\tif (day === 0 || day === 6) {\n\t\t\tif (value > 0) {\n\t\t\t\tthis.next().monday();\n\t\t\t\tthis.addDays(-1);\n\t\t\t\tday = this.getDay();\n\t\t\t}\n\t\t}\n\n\t\tif (value < 0) {\n\t\t\twhile (value < 0) {\n\t\t\t\tthis.addDays(-1);\n\t\t\t\tday = this.getDay();\n\t\t\t\tif (day !== 0 && day !== 6) {\n\t\t\t\t\tvalue++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t} else if (value > 5 || (6-day) <= value) {\n\t\t\tvalue = value + (weeks * 2);\n\t\t}\n\n\t\treturn this.addDays(value);\n\t};\n\n\t/**\n\t * Adds the specified number of weeks to this instance. \n\t * @param {Number}   The number of weeks to add. The number can be positive or negative [Required]\n\t * @return {Date}    this\n\t */\n\t$P.addWeeks = function (value) {\n\t\tif (!value) { return this; }\n\t\treturn this.addDays(value * 7);\n\t};\n\n\n\t/**\n\t * Adds the specified number of months to this instance. \n\t * @param {Number}   The number of months to add. The number can be positive or negative [Required]\n\t * @return {Date}    this\n\t */\n\t$P.addMonths = function (value) {\n\t\tif (!value) { return this; }\n\t\tvar n = this.getDate();\n\t\tthis.setDate(1);\n\t\tthis.setMonth(this.getMonth() + value * 1);\n\t\tthis.setDate(Math.min(n, $D.getDaysInMonth(this.getFullYear(), this.getMonth())));\n\t\treturn this;\n\t};\n\n\t$P.addQuarters = function (value) {\n\t\tif (!value) { return this; }\n\t\t// note this will take you to the same point in the quarter as you are now.\n\t\t// i.e. - if you are 15 days into the quarter you'll be 15 days into the resulting one.\n\t\t// bonus: this allows adding fractional quarters\n\t\treturn this.addMonths(value * 3);\n\t};\n\n\t/**\n\t * Adds the specified number of years to this instance. \n\t * @param {Number}   The number of years to add. The number can be positive or negative [Required]\n\t * @return {Date}    this\n\t */\n\t$P.addYears = function (value) {\n\t\tif (!value) { return this; }\n\t\treturn this.addMonths(value * 12);\n\t};\n\n\t/**\n\t * Adds (or subtracts) to the value of the years, months, weeks, days, hours, minutes, seconds, milliseconds of the date instance using given configuration object. Positive and Negative values allowed.\n\t * Example\n\t<pre><code>\n\tDate.today().add( { days: 1, months: 1 } )\n\t \n\tnew Date().add( { years: -1 } )\n\t</code></pre> \n\t * @param {Object}   Configuration object containing attributes (months, days, etc.)\n\t * @return {Date}    this\n\t */\n\t$P.add = function (config) {\n\t\tif (typeof config === \"number\") {\n\t\t\tthis._orient = config;\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tvar x = config;\n\n\t\tif (x.day) {\n\t\t\t// If we should be a different date than today (eg: for 'tomorrow -1d', etc).\n\t\t\t// Should only effect parsing, not direct usage (eg, Finish and FinishExact)\n\t\t\tif ((x.day - this.getDate()) !== 0) {\n\t\t\t\tthis.setDate(x.day);\n\t\t\t}\n\t\t}\n\t\tif (x.milliseconds) {\n\t\t\tthis.addMilliseconds(x.milliseconds);\n\t\t}\n\t\tif (x.seconds) {\n\t\t\tthis.addSeconds(x.seconds);\n\t\t}\n\t\tif (x.minutes) {\n\t\t\tthis.addMinutes(x.minutes);\n\t\t}\n\t\tif (x.hours) {\n\t\t\tthis.addHours(x.hours);\n\t\t}\n\t\tif (x.weeks) {\n\t\t\tthis.addWeeks(x.weeks);\n\t\t}\n\t\tif (x.months) {\n\t\t\tthis.addMonths(x.months);\n\t\t}\n\t\tif (x.years) {\n\t\t\tthis.addYears(x.years);\n\t\t}\n\t\tif (x.days) {\n\t\t\tthis.addDays(x.days);\n\t\t}\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Get the week number. Week one (1) is the week which contains the first Thursday of the year. Monday is considered the first day of the week.\n\t * The .getWeek() function does NOT convert the date to UTC. The local datetime is used. \n\t * Please use .getISOWeek() to get the week of the UTC converted date.\n\t * @return {Number}  1 to 53\n\t */\n\t$P.getWeek = function (utc) {\n\t\t// Create a copy of this date object  \n\t\tvar self, target = new Date(this.valueOf());\n\t\tif (utc) {\n\t\t\ttarget.addMinutes(target.getTimezoneOffset());\n\t\t\tself = target.clone();\n\t\t} else {\n\t\t\tself = this;\n\t\t}\n\t\t// ISO week date weeks start on monday  \n\t\t// so correct the day number  \n\t\tvar dayNr = (self.getDay() + 6) % 7;\n\t\t// ISO 8601 states that week 1 is the week  \n\t\t// with the first thursday of that year.  \n\t\t// Set the target date to the thursday in the target week  \n\t\ttarget.setDate(target.getDate() - dayNr + 3);\n\t\t// Store the millisecond value of the target date  \n\t\tvar firstThursday = target.valueOf();\n\t\t// Set the target to the first thursday of the year  \n\t\t// First set the target to january first  \n\t\ttarget.setMonth(0, 1);\n\t\t// Not a thursday? Correct the date to the next thursday  \n\t\tif (target.getDay() !== 4) {\n\t\t\ttarget.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);\n\t\t}\n\t\t// The weeknumber is the number of weeks between the   \n\t\t// first thursday of the year and the thursday in the target week  \n\t\treturn 1 + Math.ceil((firstThursday - target) / 604800000); // 604800000 = 7 * 24 * 3600 * 1000  \n\t};\n\t\n\t/**\n\t * Get the ISO 8601 week number. Week one (\"01\") is the week which contains the first Thursday of the year. Monday is considered the first day of the week.\n\t * The .getISOWeek() function does convert the date to it's UTC value. Please use .getWeek() to get the week of the local date.\n\t * @return {String}  \"01\" to \"53\"\n\t */\n\t$P.getISOWeek = function () {\n\t\treturn p(this.getWeek(true));\n\t};\n\n\t/**\n\t * Moves the date to Monday of the week set. Week one (1) is the week which contains the first Thursday of the year.\n\t * @param {Number}   A Number (1 to 53) that represents the week of the year.\n\t * @return {Date}    this\n\t */\n\t$P.setWeek = function (n) {\n\t\tif ((n - this.getWeek()) === 0) {\n\t\t\tif (this.getDay() !== 1) {\n\t\t\t\treturn this.moveToDayOfWeek(1, (this.getDay() > 1 ? -1 : 1));\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.moveToDayOfWeek(1, (this.getDay() > 1 ? -1 : 1)).addWeeks(n - this.getWeek());\n\t\t}\n\t};\n\n\t$P.setQuarter = function (qtr) {\n\t\tvar month = Math.abs(((qtr-1) * 3) + 1);\n\t\treturn this.setMonth(month, 1);\n\t};\n\n\t$P.getQuarter = function () {\n\t\treturn Date.getQuarter(this);\n\t};\n\n\t$P.getDaysLeftInQuarter = function () {\n\t\treturn Date.getDaysLeftInQuarter(this);\n\t};\n\n\t/**\n\t * Moves the date to the next n'th occurrence of the dayOfWeek starting from the beginning of the month. The number (-1) is a magic number and will return the last occurrence of the dayOfWeek in the month.\n\t * @param {Number}   The dayOfWeek to move to\n\t * @param {Number}   The n'th occurrence to move to. Use (-1) to return the last occurrence in the month\n\t * @return {Date}    this\n\t */\n\t$P.moveToNthOccurrence = function (dayOfWeek, occurrence) {\n\t\tif (dayOfWeek === \"Weekday\") {\n\t\t\tif (occurrence > 0) {\n\t\t\t\tthis.moveToFirstDayOfMonth();\n\t\t\t\tif (this.is().weekday()) {\n\t\t\t\t\toccurrence -= 1;\n\t\t\t\t}\n\t\t\t} else if (occurrence < 0) {\n\t\t\t\tthis.moveToLastDayOfMonth();\n\t\t\t\tif (this.is().weekday()) {\n\t\t\t\t\toccurrence += 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\treturn this.addWeekdays(occurrence);\n\t\t}\n\t\tvar shift = 0;\n\t\tif (occurrence > 0) {\n\t\t\tshift = occurrence - 1;\n\t\t}\n\t\telse if (occurrence === -1) {\n\t\t\tthis.moveToLastDayOfMonth();\n\t\t\tif (this.getDay() !== dayOfWeek) {\n\t\t\t\tthis.moveToDayOfWeek(dayOfWeek, -1);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\treturn this.moveToFirstDayOfMonth().addDays(-1).moveToDayOfWeek(dayOfWeek, +1).addWeeks(shift);\n\t};\n\n\n\tvar moveToN = function (getFunc, addFunc, nVal) {\n\t\treturn function (value, orient) {\n\t\t\tvar diff = (value - this[getFunc]() + nVal * (orient || +1)) % nVal;\n\t\t\treturn this[addFunc]((diff === 0) ? diff += nVal * (orient || +1) : diff);\n\t\t};\n\t};\n\t/**\n\t * Move to the next or last dayOfWeek based on the orient value.\n\t * @param {Number}   The dayOfWeek to move to\n\t * @param {Number}   Forward (+1) or Back (-1). Defaults to +1. [Optional]\n\t * @return {Date}    this\n\t */\n\t$P.moveToDayOfWeek = moveToN(\"getDay\", \"addDays\", 7);\n\t/**\n\t * Move to the next or last month based on the orient value.\n\t * @param {Number}   The month to move to. 0 = January, 11 = December\n\t * @param {Number}   Forward (+1) or Back (-1). Defaults to +1. [Optional]\n\t * @return {Date}    this\n\t */\n\t$P.moveToMonth = moveToN(\"getMonth\", \"addMonths\", 12);\n\t/**\n\t * Get the Ordinate of the current day (\"th\", \"st\", \"rd\").\n\t * @return {String} \n\t */\n\t$P.getOrdinate = function () {\n\t\tvar num = this.getDate();\n\t\treturn ord(num);\n\t};\n\t/**\n\t * Get the Ordinal day (numeric day number) of the year, adjusted for leap year.\n\t * @return {Number} 1 through 365 (366 in leap years)\n\t */\n\t$P.getOrdinalNumber = function () {\n\t\treturn Math.ceil((this.clone().clearTime() - new Date(this.getFullYear(), 0, 1)) / 86400000) + 1;\n\t};\n\n\t/**\n\t * Get the time zone abbreviation of the current date.\n\t * @return {String} The abbreviated time zone name (e.g. \"EST\")\n\t */\n\t$P.getTimezone = function () {\n\t\treturn $D.getTimezoneAbbreviation(this.getUTCOffset(), this.isDaylightSavingTime());\n\t};\n\n\t$P.setTimezoneOffset = function (offset) {\n\t\tvar here = this.getTimezoneOffset(), there = Number(offset) * -6 / 10;\n\t\treturn (there || there === 0) ? this.addMinutes(there - here) : this;\n\t};\n\n\t$P.setTimezone = function (offset) {\n\t\treturn this.setTimezoneOffset($D.getTimezoneOffset(offset));\n\t};\n\n\t/**\n\t * Indicates whether Daylight Saving Time is observed in the current time zone.\n\t * @return {Boolean} true|false\n\t */\n\t$P.hasDaylightSavingTime = function () {\n\t\treturn (Date.today().set({month: 0, day: 1}).getTimezoneOffset() !== Date.today().set({month: 6, day: 1}).getTimezoneOffset());\n\t};\n\t\n\t/**\n\t * Indicates whether this Date instance is within the Daylight Saving Time range for the current time zone.\n\t * @return {Boolean} true|false\n\t */\n\t$P.isDaylightSavingTime = function () {\n\t\treturn Date.today().set({month: 0, day: 1}).getTimezoneOffset() !== this.getTimezoneOffset();\n\t};\n\n\t/**\n\t * Get the offset from UTC of the current date.\n\t * @return {String} The 4-character offset string prefixed with + or - (e.g. \"-0500\")\n\t */\n\t$P.getUTCOffset = function (offset) {\n\t\tvar n = (offset || this.getTimezoneOffset()) * -10 / 6, r;\n\t\tif (n < 0) {\n\t\t\tr = (n - 10000).toString();\n\t\t\treturn r.charAt(0) + r.substr(2);\n\t\t} else {\n\t\t\tr = (n + 10000).toString();\n\t\t\treturn \"+\" + r.substr(1);\n\t\t}\n\t};\n\n\t/**\n\t * Returns the number of milliseconds between this date and date.\n\t * @param {Date} Defaults to now\n\t * @return {Number} The diff in milliseconds\n\t */\n\t$P.getElapsed = function (date) {\n\t\treturn (date || new Date()) - this;\n\t};\n\n\t/**\n\t * Set the value of year, month, day, hour, minute, second, millisecond of date instance using given configuration object.\n\t * Example\n\t<pre><code>\n\tDate.today().set( { day: 20, month: 1 } )\n\n\tnew Date().set( { millisecond: 0 } )\n\t</code></pre>\n\t * \n\t * @param {Object}   Configuration object containing attributes (month, day, etc.)\n\t * @return {Date}    this\n\t */\n\t$P.set = function (config) {\n\t\tconfig = validateConfigObject.call(this, config);\n\t\tvar key;\n\t\tfor (key in config) {\n\t\t\tif (hasOwnProperty.call(config, key)) {\n\t\t\t\tvar name = key.charAt(0).toUpperCase() + key.slice(1);\n\t\t\t\tvar addFunc, getFunc;\n\t\t\t\tif (key !== \"week\" && key !== \"month\" && key !== \"timezone\" && key !== \"timezoneOffset\") {\n\t\t\t\t\tname += \"s\";\n\t\t\t\t}\n\t\t\t\taddFunc = \"add\" + name;\n\t\t\t\tgetFunc = \"get\" + name;\n\t\t\t\tif (key === \"month\") {\n\t\t\t\t\taddFunc = addFunc + \"s\";\n\t\t\t\t} else if (key === \"year\"){\n\t\t\t\t\tgetFunc = \"getFullYear\";\n\t\t\t\t}\n\t\t\t\tif (key !== \"day\" && key !== \"timezone\" && key !== \"timezoneOffset\"  && key !== \"week\" &&  key !== \"hour\") {\n\t\t\t\t\t\tthis[addFunc](config[key] - this[getFunc]());\n\t\t\t\t} else if ( key === \"timezone\"|| key === \"timezoneOffset\" || key === \"week\" || key === \"hour\") {\n\t\t\t\t\tthis[\"set\"+name](config[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// day has to go last because you can't validate the day without first knowing the month\n\t\tif (config.day) {\n\t\t\tthis.addDays(config.day - this.getDate());\n\t\t}\n\t\t\n\t\treturn this;\n\t};\n\n\t/**\n\t * Moves the date to the first day of the month.\n\t * @return {Date}    this\n\t */\n\t$P.moveToFirstDayOfMonth = function () {\n\t\treturn this.set({ day: 1 });\n\t};\n\n\t/**\n\t * Moves the date to the last day of the month.\n\t * @return {Date}    this\n\t */\n\t$P.moveToLastDayOfMonth = function () {\n\t\treturn this.set({ day: $D.getDaysInMonth(this.getFullYear(), this.getMonth())});\n\t};\n\n\n\t/**\n\t * Converts the value of the current Date object to its equivalent string representation.\n\t * Format Specifiers\n\t * CUSTOM DATE AND TIME FORMAT STRINGS\n\t * Format  Description                                                                  Example\n\t * ------  ---------------------------------------------------------------------------  -----------------------\n\t * s      The seconds of the minute between 0-59.                                      \"0\" to \"59\"\n\t * ss     The seconds of the minute with leading zero if required.                     \"00\" to \"59\"\n\t * \n\t * m      The minute of the hour between 0-59.                                         \"0\"  or \"59\"\n\t * mm     The minute of the hour with leading zero if required.                        \"00\" or \"59\"\n\t * \n\t * h      The hour of the day between 1-12.                                            \"1\"  to \"12\"\n\t * hh     The hour of the day with leading zero if required.                           \"01\" to \"12\"\n\t * \n\t * H      The hour of the day between 0-23.                                            \"0\"  to \"23\"\n\t * HH     The hour of the day with leading zero if required.                           \"00\" to \"23\"\n\t * \n\t * d      The day of the month between 1 and 31.                                       \"1\"  to \"31\"\n\t * dd     The day of the month with leading zero if required.                          \"01\" to \"31\"\n\t * ddd    Abbreviated day name. Date.CultureInfo.abbreviatedDayNames.                                \"Mon\" to \"Sun\" \n\t * dddd   The full day name. Date.CultureInfo.dayNames.                                              \"Monday\" to \"Sunday\"\n\t * \n\t * M      The month of the year between 1-12.                                          \"1\" to \"12\"\n\t * MM     The month of the year with leading zero if required.                         \"01\" to \"12\"\n\t * MMM    Abbreviated month name. Date.CultureInfo.abbreviatedMonthNames.                            \"Jan\" to \"Dec\"\n\t * MMMM   The full month name. Date.CultureInfo.monthNames.                                          \"January\" to \"December\"\n\t *\n\t * yy     The year as a two-digit number.                                              \"99\" or \"08\"\n\t * yyyy   The full four digit year.                                                    \"1999\" or \"2008\"\n\t * \n\t * t      Displays the first character of the A.M./P.M. designator.                    \"A\" or \"P\"\n\t *\t\tDate.CultureInfo.amDesignator or Date.CultureInfo.pmDesignator\n\t * tt     Displays the A.M./P.M. designator.                                           \"AM\" or \"PM\"\n\t *\t\tDate.CultureInfo.amDesignator or Date.CultureInfo.pmDesignator\n\t * \n\t * S      The ordinal suffix (\"st, \"nd\", \"rd\" or \"th\") of the current day.            \"st, \"nd\", \"rd\" or \"th\"\n\t *\n\t * STANDARD DATE AND TIME FORMAT STRINGS\n\t * Format  Description                                                                  Example\n\t *------  ---------------------------------------------------------------------------  -----------------------\n\t * d      The CultureInfo shortDate Format Pattern                                     \"M/d/yyyy\"\n\t * D      The CultureInfo longDate Format Pattern                                      \"dddd, MMMM dd, yyyy\"\n\t * F      The CultureInfo fullDateTime Format Pattern                                  \"dddd, MMMM dd, yyyy h:mm:ss tt\"\n\t * m      The CultureInfo monthDay Format Pattern                                      \"MMMM dd\"\n\t * r      The CultureInfo rfc1123 Format Pattern                                       \"ddd, dd MMM yyyy HH:mm:ss GMT\"\n\t * s      The CultureInfo sortableDateTime Format Pattern                              \"yyyy-MM-ddTHH:mm:ss\"\n\t * t      The CultureInfo shortTime Format Pattern                                     \"h:mm tt\"\n\t * T      The CultureInfo longTime Format Pattern                                      \"h:mm:ss tt\"\n\t * u      The CultureInfo universalSortableDateTime Format Pattern                     \"yyyy-MM-dd HH:mm:ssZ\"\n\t * y      The CultureInfo yearMonth Format Pattern                                     \"MMMM, yyyy\"\n\t *\n\t * @param {String}   A format string consisting of one or more format spcifiers [Optional].\n\t * @return {String}  A string representation of the current Date object.\n\t */\n\t\n\tvar ord = function (n) {\n\t\tswitch (n * 1) {\n\t\tcase 1:\n\t\tcase 21:\n\t\tcase 31:\n\t\t\treturn \"st\";\n\t\tcase 2:\n\t\tcase 22:\n\t\t\treturn \"nd\";\n\t\tcase 3:\n\t\tcase 23:\n\t\t\treturn \"rd\";\n\t\tdefault:\n\t\t\treturn \"th\";\n\t\t}\n\t};\n\tvar parseStandardFormats = function (format) {\n\t\tvar y, c = Date.CultureInfo.formatPatterns;\n\t\tswitch (format) {\n\t\t\tcase \"d\":\n\t\t\t\treturn this.toString(c.shortDate);\n\t\t\tcase \"D\":\n\t\t\t\treturn this.toString(c.longDate);\n\t\t\tcase \"F\":\n\t\t\t\treturn this.toString(c.fullDateTime);\n\t\t\tcase \"m\":\n\t\t\t\treturn this.toString(c.monthDay);\n\t\t\tcase \"r\":\n\t\t\tcase \"R\":\n\t\t\t\ty = this.clone().addMinutes(this.getTimezoneOffset());\n\t\t\t\treturn y.toString(c.rfc1123) + \" GMT\";\n\t\t\tcase \"s\":\n\t\t\t\treturn this.toString(c.sortableDateTime);\n\t\t\tcase \"t\":\n\t\t\t\treturn this.toString(c.shortTime);\n\t\t\tcase \"T\":\n\t\t\t\treturn this.toString(c.longTime);\n\t\t\tcase \"u\":\n\t\t\t\ty = this.clone().addMinutes(this.getTimezoneOffset());\n\t\t\t\treturn y.toString(c.universalSortableDateTime);\n\t\t\tcase \"y\":\n\t\t\t\treturn this.toString(c.yearMonth);\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t};\n\tvar parseFormatStringsClosure = function (context) {\n\t\treturn function (m) {\n\t\t\tif (m.charAt(0) === \"\\\\\") {\n\t\t\t\treturn m.replace(\"\\\\\", \"\");\n\t\t\t}\n\t\t\tswitch (m) {\n\t\t\t\tcase \"hh\":\n\t\t\t\t\treturn p(context.getHours() < 13 ? (context.getHours() === 0 ? 12 : context.getHours()) : (context.getHours() - 12));\n\t\t\t\tcase \"h\":\n\t\t\t\t\treturn context.getHours() < 13 ? (context.getHours() === 0 ? 12 : context.getHours()) : (context.getHours() - 12);\n\t\t\t\tcase \"HH\":\n\t\t\t\t\treturn p(context.getHours());\n\t\t\t\tcase \"H\":\n\t\t\t\t\treturn context.getHours();\n\t\t\t\tcase \"mm\":\n\t\t\t\t\treturn p(context.getMinutes());\n\t\t\t\tcase \"m\":\n\t\t\t\t\treturn context.getMinutes();\n\t\t\t\tcase \"ss\":\n\t\t\t\t\treturn p(context.getSeconds());\n\t\t\t\tcase \"s\":\n\t\t\t\t\treturn context.getSeconds();\n\t\t\t\tcase \"yyyy\":\n\t\t\t\t\treturn p(context.getFullYear(), 4);\n\t\t\t\tcase \"yy\":\n\t\t\t\t\treturn p(context.getFullYear());\n\t\t\t\tcase \"y\":\n\t\t\t\t\treturn context.getFullYear();\n\t\t\t\tcase \"E\":\n\t\t\t\tcase \"dddd\":\n\t\t\t\t\treturn Date.CultureInfo.dayNames[context.getDay()];\n\t\t\t\tcase \"ddd\":\n\t\t\t\t\treturn Date.CultureInfo.abbreviatedDayNames[context.getDay()];\n\t\t\t\tcase \"dd\":\n\t\t\t\t\treturn p(context.getDate());\n\t\t\t\tcase \"d\":\n\t\t\t\t\treturn context.getDate();\n\t\t\t\tcase \"MMMM\":\n\t\t\t\t\treturn Date.CultureInfo.monthNames[context.getMonth()];\n\t\t\t\tcase \"MMM\":\n\t\t\t\t\treturn Date.CultureInfo.abbreviatedMonthNames[context.getMonth()];\n\t\t\t\tcase \"MM\":\n\t\t\t\t\treturn p((context.getMonth() + 1));\n\t\t\t\tcase \"M\":\n\t\t\t\t\treturn context.getMonth() + 1;\n\t\t\t\tcase \"t\":\n\t\t\t\t\treturn context.getHours() < 12 ? Date.CultureInfo.amDesignator.substring(0, 1) : Date.CultureInfo.pmDesignator.substring(0, 1);\n\t\t\t\tcase \"tt\":\n\t\t\t\t\treturn context.getHours() < 12 ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator;\n\t\t\t\tcase \"S\":\n\t\t\t\t\treturn ord(context.getDate());\n\t\t\t\tcase \"W\":\n\t\t\t\t\treturn context.getWeek();\n\t\t\t\tcase \"WW\":\n\t\t\t\t\treturn context.getISOWeek();\n\t\t\t\tcase \"Q\":\n\t\t\t\t\treturn \"Q\" + context.getQuarter();\n\t\t\t\tcase \"q\":\n\t\t\t\t\treturn String(context.getQuarter());\n\t\t\t\tcase \"z\":\n\t\t\t\t\treturn context.getTimezone();\n\t\t\t\tcase \"Z\":\n\t\t\t\tcase \"X\":\n\t\t\t\t\treturn Date.getTimezoneOffset(context.getTimezone());\n\t\t\t\tcase \"ZZ\": // Timezone offset in seconds\n\t\t\t\t\treturn context.getTimezoneOffset() * -60;\n\t\t\t\tcase \"u\":\n\t\t\t\t\treturn context.getDay();\n\t\t\t\tcase \"L\":\n\t\t\t\t\treturn ($D.isLeapYear(context.getFullYear())) ? 1 : 0;\n\t\t\t\tcase \"B\":\n\t\t\t\t\t// Swatch Internet Time (.beats)\n\t\t\t\t\treturn \"@\"+((context.getUTCSeconds() + (context.getUTCMinutes()*60) + ((context.getUTCHours()+1)*3600))/86.4);\n\t\t\t\tdefault:\n\t\t\t\t\treturn m;\n\t\t\t}\n\t\t};\n\t};\n\t$P.toString = function (format, ignoreStandards) {\n\t\t\n\t\t// Standard Date and Time Format Strings. Formats pulled from CultureInfo file and\n\t\t// may vary by culture. \n\t\tif (!ignoreStandards && format && format.length === 1) {\n\t\t\toutput = parseStandardFormats.call(this, format);\n\t\t\tif (output) {\n\t\t\t\treturn output;\n\t\t\t}\n\t\t}\n\t\tvar parseFormatStrings = parseFormatStringsClosure(this);\n\t\treturn format ? format.replace(/((\\\\)?(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|S|q|Q|WW?W?W?)(?![^\\[]*\\]))/g, parseFormatStrings).replace(/\\[|\\]/g, \"\") : this._toString();\n\t};\n\n}());","/*************************************************************\r\n * SugarPak - Domain Specific Language -  Syntactical Sugar  *\r\n *************************************************************/\r\n \r\n(function () {\r\n\tvar $D = Date, $P = $D.prototype, $N = Number.prototype;\r\n\r\n\t// private\r\n\t$P._orient = +1;\r\n\r\n\t// private\r\n\t$P._nth = null;\r\n\r\n\t// private\r\n\t$P._is = false;\r\n\r\n\t// private\r\n\t$P._same = false;\r\n\t\r\n\t// private\r\n\t$P._isSecond = false;\r\n\r\n\t// private\r\n\t$N._dateElement = \"days\";\r\n\r\n\t/** \r\n\t * Moves the date to the next instance of a date as specified by the subsequent date element function (eg. .day(), .month()), month name function (eg. .january(), .jan()) or day name function (eg. .friday(), fri()).\r\n\t * Example\r\n\t<pre><code>\r\n\tDate.today().next().friday();\r\n\tDate.today().next().fri();\r\n\tDate.today().next().march();\r\n\tDate.today().next().mar();\r\n\tDate.today().next().week();\r\n\t</code></pre>\r\n\t * \r\n\t * @return {Date}    date\r\n\t */\r\n\t$P.next = function () {\r\n\t\tthis._move = true;\r\n\t\tthis._orient = +1;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/** \r\n\t * Creates a new Date (Date.today()) and moves the date to the next instance of the date as specified by the subsequent date element function (eg. .day(), .month()), month name function (eg. .january(), .jan()) or day name function (eg. .friday(), fri()).\r\n\t * Example\r\n\t<pre><code>\r\n\tDate.next().friday();\r\n\tDate.next().fri();\r\n\tDate.next().march();\r\n\tDate.next().mar();\r\n\tDate.next().week();\r\n\t</code></pre>\r\n\t * \r\n\t * @return {Date}    date\r\n\t */\r\n\t$D.next = function () {\r\n\t\treturn $D.today().next();\r\n\t};\r\n\r\n\t/** \r\n\t * Moves the date to the previous instance of a date as specified by the subsequent date element function (eg. .day(), .month()), month name function (eg. .january(), .jan()) or day name function (eg. .friday(), fri()).\r\n\t * Example\r\n\t<pre><code>\r\n\tDate.today().last().friday();\r\n\tDate.today().last().fri();\r\n\tDate.today().last().march();\r\n\tDate.today().last().mar();\r\n\tDate.today().last().week();\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Date}    date\r\n\t */\r\n\t$P.last = $P.prev = $P.previous = function () {\r\n\t\tthis._move = true;\r\n\t\tthis._orient = -1;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/** \r\n\t * Creates a new Date (Date.today()) and moves the date to the previous instance of the date as specified by the subsequent date element function (eg. .day(), .month()), month name function (eg. .january(), .jan()) or day name function (eg. .friday(), fri()).\r\n\t * Example\r\n\t<pre><code>\r\n\tDate.last().friday();\r\n\tDate.last().fri();\r\n\tDate.previous().march();\r\n\tDate.prev().mar();\r\n\tDate.last().week();\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Date}    date\r\n\t */\r\n\t$D.last = $D.prev = $D.previous = function () {\r\n\t\treturn $D.today().last();\r\n\t};\r\n\r\n\t/** \r\n\t * Performs a equality check when followed by either a month name, day name or .weekday() function.\r\n\t * Example\r\n\t<pre><code>\r\n\tDate.today().is().friday(); // true|false\r\n\tDate.today().is().fri();\r\n\tDate.today().is().march();\r\n\tDate.today().is().mar();\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Boolean}    true|false\r\n\t */\r\n\t$P.is = function () {\r\n\t\tthis._is = true;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/** \r\n\t * Determines if two date objects occur on/in exactly the same instance of the subsequent date part function.\r\n\t * The function .same() must be followed by a date part function (example: .day(), .month(), .year(), etc).\r\n\t *\r\n\t * An optional Date can be passed in the date part function. If now date is passed as a parameter, 'Now' is used. \r\n\t *\r\n\t * The following example demonstrates how to determine if two dates fall on the exact same day.\r\n\t *\r\n\t * Example\r\n\t<pre><code>\r\n\tvar d1 = Date.today(); // today at 00:00\r\n\tvar d2 = new Date();   // exactly now.\r\n\r\n\t// Do they occur on the same day?\r\n\td1.same().day(d2); // true\r\n\t\r\n\t// Do they occur on the same hour?\r\n\td1.same().hour(d2); // false, unless d2 hour is '00' (midnight).\r\n\t\r\n\t// What if it's the same day, but one year apart?\r\n\tvar nextYear = Date.today().add(1).year();\r\n\r\n\td1.same().day(nextYear); // false, because the dates must occur on the exact same day. \r\n\t</code></pre>\r\n\t *\r\n\t * Scenario: Determine if a given date occurs during some week period 2 months from now. \r\n\t *\r\n\t * Example\r\n\t<pre><code>\r\n\tvar future = Date.today().add(2).months();\r\n\treturn someDate.same().week(future); // true|false;\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Boolean}    true|false\r\n\t */\r\n\t$P.same = function () {\r\n\t\tthis._same = true;\r\n\t\tthis._isSecond = false;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/** \r\n\t * Determines if the current date/time occurs during Today. Must be preceded by the .is() function.\r\n\t * Example\r\n\t<pre><code>\r\n\tsomeDate.is().today();    // true|false\r\n\tnew Date().is().today();  // true\r\n\tDate.today().is().today();// true\r\n\tDate.today().add(-1).day().is().today(); // false\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Boolean}    true|false\r\n\t */\r\n\t$P.today = function () {\r\n\t\treturn this.same().day();\r\n\t};\r\n\r\n\t/** \r\n\t * Determines if the current date is a weekday. This function must be preceded by the .is() function.\r\n\t * Example\r\n\t<pre><code>\r\n\tDate.today().is().weekday(); // true|false\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Boolean}    true|false\r\n\t */\r\n\t$P.weekday = function () {\r\n\t\tif (this._nth) {\r\n\t\t\treturn df(\"Weekday\").call(this);\r\n\t\t}\r\n\t\tif (this._move) {\r\n\t\t\treturn this.addWeekdays(this._orient);\r\n\t\t}\r\n\t\tif (this._is) {\r\n\t\t\tthis._is = false;\r\n\t\t\treturn (!this.is().sat() && !this.is().sun());\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\t/** \r\n\t * Determines if the current date is on the weekend. This function must be preceded by the .is() function.\r\n\t * Example\r\n\t<pre><code>\r\n\tDate.today().is().weekend(); // true|false\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Boolean}    true|false\r\n\t */\r\n\t$P.weekend = function () {\r\n\t\tif (this._is) {\r\n\t\t\tthis._is = false;\r\n\t\t\treturn (this.is().sat() || this.is().sun());\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/** \r\n\t * Sets the Time of the current Date instance. A string \"6:15 pm\" or config object {hour:18, minute:15} are accepted.\r\n\t * Example\r\n\t<pre><code>\r\n\t// Set time to 6:15pm with a String\r\n\tDate.today().at(\"6:15pm\");\r\n\r\n\t// Set time to 6:15pm with a config object\r\n\tDate.today().at({hour:18, minute:15});\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Date}    date\r\n\t */\r\n\t$P.at = function (time) {\r\n\t\treturn (typeof time === \"string\") ? $D.parse(this.toString(\"d\") + \" \" + time) : this.set(time);\r\n\t};\r\n\t\t\r\n\t/** \r\n\t * Creates a new Date() and adds this (Number) to the date based on the preceding date element function (eg. second|minute|hour|day|month|year).\r\n\t * Example\r\n\t<pre><code>\r\n\t// Undeclared Numbers must be wrapped with parentheses. Requirment of JavaScript.\r\n\t(3).days().fromNow();\r\n\t(6).months().fromNow();\r\n\r\n\t// Declared Number variables do not require parentheses. \r\n\tvar n = 6;\r\n\tn.months().fromNow();\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Date}    A new Date instance\r\n\t */\r\n\t$N.fromNow = $N.after = function (date) {\r\n\t\tvar c = {};\r\n\t\tc[this._dateElement] = this;\r\n\t\treturn ((!date) ? new Date() : date.clone()).add(c);\r\n\t};\r\n\r\n\t/** \r\n\t * Creates a new Date() and subtract this (Number) from the date based on the preceding date element function (eg. second|minute|hour|day|month|year).\r\n\t * Example\r\n\t<pre><code>\r\n\t// Undeclared Numbers must be wrapped with parentheses. Requirment of JavaScript.\r\n\t(3).days().ago();\r\n\t(6).months().ago();\r\n\r\n\t// Declared Number variables do not require parentheses. \r\n\tvar n = 6;\r\n\tn.months().ago();\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Date}    A new Date instance\r\n\t */\r\n\t$N.ago = $N.before = function (date) {\r\n\t\tvar c = {},\r\n\t\ts = (this._dateElement[this._dateElement.length-1] !== \"s\") ? this._dateElement + \"s\" : this._dateElement;\r\n\t\tc[s] = this * -1;\r\n\t\treturn ((!date) ? new Date() : date.clone()).add(c);\r\n\t};\r\n\r\n\t// Do NOT modify the following string tokens. These tokens are used to build dynamic functions.\r\n\t// All culture-specific strings can be found in the CultureInfo files.\r\n\tvar dx = (\"sunday monday tuesday wednesday thursday friday saturday\").split(/\\s/),\r\n\t\tmx = (\"january february march april may june july august september october november december\").split(/\\s/),\r\n\t\tpx = (\"Millisecond Second Minute Hour Day Week Month Year Quarter Weekday\").split(/\\s/),\r\n\t\tpxf = (\"Milliseconds Seconds Minutes Hours Date Week Month FullYear Quarter\").split(/\\s/),\r\n\t\tnth = (\"final first second third fourth fifth\").split(/\\s/),\r\n\t\tde;\r\n\r\n   /** \r\n\t * Returns an object literal of all the date parts.\r\n\t * Example\r\n\t<pre><code>\r\n\tvar o = new Date().toObject();\r\n\t\r\n\t// { year: 2008, month: 4, week: 20, day: 13, hour: 18, minute: 9, second: 32, millisecond: 812 }\r\n\t\r\n\t// The object properties can be referenced directly from the object.\r\n\t\r\n\talert(o.day);  // alerts \"13\"\r\n\talert(o.year); // alerts \"2008\"\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Date}    An object literal representing the original date object.\r\n\t */\r\n\t$P.toObject = function () {\r\n\t\tvar o = {};\r\n\t\tfor (var i = 0; i < px.length; i++) {\r\n\t\t\tif (this[\"get\" + pxf[i]]) {\r\n\t\t\t\to[px[i].toLowerCase()] = this[\"get\" + pxf[i]]();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn o;\r\n\t};\r\n   \r\n   /** \r\n\t * Returns a date created from an object literal. Ignores the .week property if set in the config. \r\n\t * Example\r\n\t<pre><code>\r\n\tvar o = new Date().toObject();\r\n\t\r\n\treturn Date.fromObject(o); // will return the same date. \r\n\r\n\tvar o2 = {month: 1, day: 20, hour: 18}; // birthday party!\r\n\tDate.fromObject(o2);\r\n\t</code></pre>\r\n\t *  \r\n\t * @return {Date}    An object literal representing the original date object.\r\n\t */\r\n\t$D.fromObject = function(config) {\r\n\t\tconfig.week = null;\r\n\t\treturn Date.today().set(config);\r\n\t};\r\n\t\t\r\n\t// Create day name functions and abbreviated day name functions (eg. monday(), friday(), fri()).\r\n\t\r\n\tvar df = function (n) {\r\n\t\treturn function () {\r\n\t\t\tif (this._is) {\r\n\t\t\t\tthis._is = false;\r\n\t\t\t\treturn this.getDay() === n;\r\n\t\t\t}\r\n\t\t\tif (this._move) { this._move = null; }\r\n\t\t\tif (this._nth !== null) {\r\n\t\t\t\t// If the .second() function was called earlier, remove the _orient \r\n\t\t\t\t// from the date, and then continue.\r\n\t\t\t\t// This is required because 'second' can be used in two different context.\r\n\t\t\t\t// \r\n\t\t\t\t// Example\r\n\t\t\t\t//\r\n\t\t\t\t//   Date.today().add(1).second();\r\n\t\t\t\t//   Date.march().second().monday();\r\n\t\t\t\t// \r\n\t\t\t\t// Things get crazy with the following...\r\n\t\t\t\t//   Date.march().add(1).second().second().monday(); // but it works!!\r\n\t\t\t\t//  \r\n\t\t\t\tif (this._isSecond) {\r\n\t\t\t\t\tthis.addSeconds(this._orient * -1);\r\n\t\t\t\t}\r\n\t\t\t\t// make sure we reset _isSecond\r\n\t\t\t\tthis._isSecond = false;\r\n\r\n\t\t\t\tvar ntemp = this._nth;\r\n\t\t\t\tthis._nth = null;\r\n\t\t\t\tvar temp = this.clone().moveToLastDayOfMonth();\r\n\t\t\t\tthis.moveToNthOccurrence(n, ntemp);\r\n\t\t\t\tif (this > temp) {\r\n\t\t\t\t\tthrow new RangeError($D.getDayName(n) + \" does not occur \" + ntemp + \" times in the month of \" + $D.getMonthName(temp.getMonth()) + \" \" + temp.getFullYear() + \".\");\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\treturn this.moveToDayOfWeek(n, this._orient);\r\n\t\t};\r\n\t};\r\n\t\r\n\tvar sdf = function (n) {\r\n\t\treturn function () {\r\n\t\t\tvar t = $D.today(), shift = n - t.getDay();\r\n\t\t\tif (n === 0 && Date.CultureInfo.firstDayOfWeek === 1 && t.getDay() !== 0) {\r\n\t\t\t\tshift = shift + 7;\r\n\t\t\t}\r\n\t\t\treturn t.addDays(shift);\r\n\t\t};\r\n\t};\r\n\t\r\n\r\n\t\r\n\t// Create month name functions and abbreviated month name functions (eg. january(), march(), mar()).\r\n\tvar month_instance_functions = function (n) {\r\n\t\treturn function () {\r\n\t\t\tif (this._is) {\r\n\t\t\t\tthis._is = false;\r\n\t\t\t\treturn this.getMonth() === n;\r\n\t\t\t}\r\n\t\t\treturn this.moveToMonth(n, this._orient);\r\n\t\t};\r\n\t};\r\n\t\r\n\tvar month_static_functions = function (n) {\r\n\t\treturn function () {\r\n\t\t\treturn $D.today().set({ month: n, day: 1 });\r\n\t\t};\r\n\t};\r\n\t\r\n\tvar processTerms = function (names, staticFunc, instanceFunc) {\r\n\t\tfor (var i = 0; i < names.length; i++) {\r\n\t\t\t// Create constant static Name variables.\r\n\t\t\t$D[names[i].toUpperCase()] = $D[names[i].toUpperCase().substring(0, 3)] = i;\r\n\t\t\t// Create Name functions.\r\n\t\t\t$D[names[i]] = $D[names[i].substring(0, 3)] = staticFunc(i);\r\n\t\t\t// Create Name instance functions.\r\n\t\t\t$P[names[i]] = $P[names[i].substring(0, 3)] = instanceFunc(i);\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tprocessTerms(dx, sdf, df);\r\n\tprocessTerms(mx, month_static_functions, month_instance_functions);\r\n\t\r\n\t// Create date element functions and plural date element functions used with Date (eg. day(), days(), months()).\r\n\tvar ef = function (j) {\r\n\t\treturn function () {\r\n\t\t\t// if the .second() function was called earlier, the _orient \r\n\t\t\t// has alread been added. Just return this and reset _isSecond.\r\n\t\t\tif (this._isSecond) {\r\n\t\t\t\tthis._isSecond = false;\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._same) {\r\n\t\t\t\tthis._same = this._is = false;\r\n\t\t\t\tvar o1 = this.toObject(),\r\n\t\t\t\t\to2 = (arguments[0] || new Date()).toObject(),\r\n\t\t\t\t\tv = \"\",\r\n\t\t\t\t\tk = j.toLowerCase();\r\n\r\n\t\t\t\t// the substr trick with -1 doesn't work in IE8 or less\r\n\t\t\t\tk = (k[k.length-1] === \"s\") ? k.substring(0,k.length-1) : k;\r\n\t\t\t\t\t\r\n\t\t\t\tfor (var m = (px.length - 1); m > -1; m--) {\r\n\t\t\t\t\tv = px[m].toLowerCase();\r\n\t\t\t\t\tif (o1[v] !== o2[v]) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (k === v) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (j.substring(j.length - 1) !== \"s\") {\r\n\t\t\t\tj += \"s\";\r\n\t\t\t}\r\n\t\t\tif (this._move) { this._move = null; }\r\n\t\t\treturn this[\"add\" + j](this._orient);\r\n\t\t};\r\n\t};\r\n\t\r\n\t\r\n\tvar nf = function (n) {\r\n\t\treturn function () {\r\n\t\t\tthis._dateElement = n;\r\n\t\t\treturn this;\r\n\t\t};\r\n\t};\r\n   \r\n\tfor (var k = 0; k < px.length; k++) {\r\n\t\tde = px[k].toLowerCase();\r\n\t\tif(de !== \"weekday\") {\r\n\t\t\t// Create date element functions and plural date element functions used with Date (eg. day(), days(), months()).\r\n\t\t\t$P[de] = $P[de + \"s\"] = ef(px[k]);\r\n\t\t\t\r\n\t\t\t// Create date element functions and plural date element functions used with Number (eg. day(), days(), months()).\r\n\t\t\t$N[de] = $N[de + \"s\"] = nf(de + \"s\");\r\n\t\t}\r\n\t}\r\n\t\r\n\t$P._ss = ef(\"Second\");\r\n\t\r\n\tvar nthfn = function (n) {\r\n\t\treturn function (dayOfWeek) {\r\n\t\t\tif (this._same) {\r\n\t\t\t\treturn this._ss(arguments[0]);\r\n\t\t\t}\r\n\t\t\tif (dayOfWeek || dayOfWeek === 0) {\r\n\t\t\t\treturn this.moveToNthOccurrence(dayOfWeek, n);\r\n\t\t\t}\r\n\t\t\tthis._nth = n;\r\n\r\n\t\t\t// if the operator is 'second' add the _orient, then deal with it later...\r\n\t\t\tif (n === 2 && (dayOfWeek === undefined || dayOfWeek === null)) {\r\n\t\t\t\tthis._isSecond = true;\r\n\t\t\t\treturn this.addSeconds(this._orient);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t};\r\n\t};\r\n\r\n\tfor (var l = 0; l < nth.length; l++) {\r\n\t\t$P[nth[l]] = (l === 0) ? nthfn(-1) : nthfn(l);\r\n\t}\r\n}());\r\n","(function () {\n\t\n\tDate.Parsing = {\n\t\tException: function (s) {\n\t\t\tthis.message = \"Parse error at '\" + s.substring(0, 10) + \" ...'\";\n\t\t}\n\t};\n\tvar $P = Date.Parsing;\n\tvar dayOffsets = {\n\t\tstandard: [0,31,59,90,120,151,181,212,243,273,304,334],\n\t\tleap: [0,31,60,91,121,152,182,213,244,274,305,335]\n\t};\n\n\t$P.isLeapYear = function(year) {\n\t\treturn ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n\t};\n\n\tvar utils = {\n\t\tmultiReplace : function (str, hash ) {\n\t\t\tvar key;\n\t\t\tfor (key in hash) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(hash, key)) {\n\t\t\t\t\tvar regex;\n\t\t\t\t\tif (typeof hash[key] === \"function\") {\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tregex = (hash[key] instanceof RegExp) ? hash[key] : new RegExp(hash[key], \"g\");\n\t\t\t\t\t}\n\t\t\t\t\tstr = str.replace(regex, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str;\n\t\t},\n\t\tgetDayOfYearFromWeek : function (obj) {\n\t\t\tvar d, jan4, offset;\n\t\t\tobj.weekDay = (!obj.weekDay && obj.weekDay !== 0) ? 1 : obj.weekDay;\n\t\t\td = new Date(obj.year, 0, 4);\n\t\t\tjan4 = d.getDay() === 0 ? 7 : d.getDay(); // JS is 0 indexed on Sunday.\n\t\t\toffset = jan4+3;\n\t\t\tobj.dayOfYear = ((obj.week * 7) + (obj.weekDay === 0 ? 7 : obj.weekDay))-offset;\n\t\t\treturn obj;\n\t\t},\n\t\tgetDayOfYear : function (obj, dayOffset) {\n\t\t\tif (!obj.dayOfYear) {\n\t\t\t\tobj = utils.getDayOfYearFromWeek(obj);\n\t\t\t}\n\t\t\tfor (var i=0;i <= dayOffset.length;i++) {\n\t\t\t\tif (obj.dayOfYear < dayOffset[i] || i === dayOffset.length) {\n\t\t\t\t\tobj.day = obj.day ? obj.day : (obj.dayOfYear - dayOffset[i-1]);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tobj.month = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t\tadjustForTimeZone : function (obj, date) {\n\t\t\tvar offset;\n\t\t\tif (obj.zone.toUpperCase() === \"Z\" || (obj.zone_hours === 0 && obj.zone_minutes === 0)) {\n\t\t\t\t// it's UTC/GML so work out the current timeszone offset\n\t\t\t\toffset = -date.getTimezoneOffset();\n\t\t\t} else {\n\t\t\t\toffset = (obj.zone_hours*60) + (obj.zone_minutes || 0);\n\t\t\t\tif (obj.zone_sign === \"+\") {\n\t\t\t\t\toffset *= -1;\n\t\t\t\t}\n\t\t\t\toffset -= date.getTimezoneOffset();\n\t\t\t}\n\t\t\tdate.setMinutes(date.getMinutes()+offset);\n\t\t\treturn date;\n\t\t},\n\t\tsetDefaults : function (obj) {\n\t\t\tobj.year = obj.year || Date.today().getFullYear();\n\t\t\tobj.hours = obj.hours || 0;\n\t\t\tobj.minutes = obj.minutes || 0;\n\t\t\tobj.seconds = obj.seconds || 0;\n\t\t\tobj.milliseconds = obj.milliseconds || 0;\n\t\t\tif (!(!obj.month && (obj.week || obj.dayOfYear))) {\n\t\t\t\t// if we have a month, or if we don't but don't have the day calculation data\n\t\t\t\tobj.month = obj.month || 0;\n\t\t\t\tobj.day = obj.day || 1;\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t\tdataNum: function (data, mod, explict, postProcess) {\n\t\t\tvar dataNum = data*1;\n\t\t\tif (mod) {\n\t\t\t\tif (postProcess) {\n\t\t\t\t\treturn data ? mod(data)*1 : data;\n\t\t\t\t} else {\n\t\t\t\t\treturn data ? mod(dataNum) : data;\n\t\t\t\t}\n\t\t\t} else if (!explict){\n\t\t\t\treturn data ? dataNum : data;\n\t\t\t} else {\n\t\t\t\treturn (data && typeof data !== \"undefined\") ? dataNum : data;\n\t\t\t}\n\t\t},\n\t\ttimeDataProcess: function (obj) {\n\t\t\tvar timeObj = {};\n\t\t\tfor (var x in obj.data) {\n\t\t\t\tif (obj.data.hasOwnProperty(x)) {\n\t\t\t\t\ttimeObj[x] = obj.ignore[x] ? obj.data[x] : utils.dataNum(obj.data[x], obj.mods[x], obj.explict[x], obj.postProcess[x]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (obj.data.secmins) {\n\t\t\t\tobj.data.secmins = obj.data.secmins.replace(\",\", \".\") * 60;\n\t\t\t\tif (!timeObj.minutes) {\n\t\t\t\t\ttimeObj.minutes = obj.data.secmins;\n\t\t\t\t} else if (!timeObj.seconds) {\n\t\t\t\t\ttimeObj.seconds = obj.data.secmins;\n\t\t\t\t}\n\t\t\t\tdelete obj.secmins;\n\t\t\t}\n\t\t\treturn timeObj;\n\t\t},\n\t\tbuildTimeObjectFromData: function (data) {\n\t\t\tvar time = utils.timeDataProcess({\n\t\t\t\tdata: {\n\t\t\t\t\tyear : data[1],\n\t\t\t\t\tmonth : data[5],\n\t\t\t\t\tday : data[7],\n\t\t\t\t\tweek : data[8],\n\t\t\t\t\tdayOfYear : data[10],\n\t\t\t\t\thours : data[15],\n\t\t\t\t\tzone_hours : data[23],\n\t\t\t\t\tzone_minutes : data[24],\n\t\t\t\t\tzone : data[21],\n\t\t\t\t\tzone_sign : data[22],\n\t\t\t\t\tweekDay : data[9],\n\t\t\t\t\tminutes: data[16],\n\t\t\t\t\tseconds: data[19],\n\t\t\t\t\tmilliseconds: data[20],\n\t\t\t\t\tsecmins: data[18]\n\t\t\t\t},\n\t\t\t\tmods: {\n\t\t\t\t\tmonth: function(data) {\n\t\t\t\t\t\treturn data-1;\n\t\t\t\t\t},\n\t\t\t\t\tweekDay: function (data) {\n\t\t\t\t\t\tdata = Math.abs(data);\n\t\t\t\t\t\treturn (data === 7 ? 0 : data);\n\t\t\t\t\t},\n\t\t\t\t\tminutes: function (data) {\n\t\t\t\t\t\treturn data.replace(\":\",\"\");\n\t\t\t\t\t},\n\t\t\t\t\tseconds: function (data) {\n\t\t\t\t\t\treturn Math.floor( (data.replace(\":\",\"\").replace(\",\",\".\"))*1 );\n\t\t\t\t\t},\n\t\t\t\t\tmilliseconds: function (data) {\n\t\t\t\t\t\treturn (data.replace(\",\",\".\")*1000);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tpostProcess: {\n\t\t\t\t\tminutes: true,\n\t\t\t\t\tseconds: true,\n\t\t\t\t\tmilliseconds: true\n\t\t\t\t},\n\t\t\t\texplict: {\n\t\t\t\t\tzone_hours: true,\n\t\t\t\t\tzone_minutes: true\n\t\t\t\t},\n\t\t\t\tignore: {\n\t\t\t\t\tzone: true,\n\t\t\t\t\tzone_sign: true,\n\t\t\t\t\tsecmins: true\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn time;\n\t\t},\n\t\taddToHash: function (hash, keys, data) {\n\t\t\tkeys = keys;\n\t\t\tdata = data;\n\t\t\tvar len = keys.length;\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t  hash[keys[i]] = data[i];\n\t\t\t}\n\t\t\treturn hash;\n\t\t},\n\t\tcombineRegex: function (r1, r2) {\n\t\t\treturn new RegExp(\"((\"+r1.source+\")\\\\s(\"+r2.source+\"))\");\n\t\t},\n\t\tgetDateNthString: function(add, last, inc){\n\t\t\tif (add) {\n\t\t\t\treturn Date.today().addDays(inc).toString(\"d\");\n\t\t\t} else if (last) {\n\t\t\t\treturn Date.today().last()[inc]().toString(\"d\");\n\t\t\t}\n\n\t\t},\n\t\tbuildRegexData: function (array) {\n\t\t\tvar arr = [];\n\t\t\tvar len = array.length;\n\t\t\tfor (var i=0; i < len; i++) {\n\t\t\t\tif (Object.prototype.toString.call(array[i]) === '[object Array]') { // oldIE compat version of Array.isArray\n\t\t\t\t\tarr.push(this.combineRegex(array[i][0], array[i][1]));\n\t\t\t\t} else {\n\t\t\t\t\tarr.push(array[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\t};\n\n\t$P.processTimeObject = function (obj) {\n\t\tvar date, dayOffset;\n\n\t\tutils.setDefaults(obj);\n\t\tdayOffset = ($P.isLeapYear(obj.year)) ? dayOffsets.leap : dayOffsets.standard;\n\n\t\tif (!obj.month && (obj.week || obj.dayOfYear)) {\n\t\t\tutils.getDayOfYear(obj, dayOffset);\n\t\t} else {\n\t\t\tobj.dayOfYear = dayOffset[obj.month] + obj.day;\n\t\t}\n\n\t\tdate = new Date(obj.year, obj.month, obj.day, obj.hours, obj.minutes, obj.seconds, obj.milliseconds);\n\n\t\tif (obj.zone) {\n\t\t\tutils.adjustForTimeZone(obj, date); // adjust (and calculate) for timezone\n\t\t}\n\t\treturn date;\n\t};\n\n\t$P.ISO = {\n\t\tregex : /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-4])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?\\s?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/,\n\t\tparse : function (s) {\n\t\t\tvar time, data = s.match(this.regex);\n\t\t\tif (!data || !data.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttime = utils.buildTimeObjectFromData(data);\n\n\t\t\tif (!time.year || (!time.year && (!time.month && !time.day) && (!time.week && !time.dayOfYear)) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn $P.processTimeObject(time);\n\t\t}\n\t};\n\n\t$P.Numeric = {\n\t\tisNumeric: function (e){return!isNaN(parseFloat(e))&&isFinite(e);},\n\t\tregex: /\\b([0-1]?[0-9])([0-3]?[0-9])([0-2]?[0-9]?[0-9][0-9])\\b/i,\n\t\tparse: function (s) {\n\t\t\tvar data, i,\n\t\t\t\ttime = {},\n\t\t\t\torder = Date.CultureInfo.dateElementOrder.split(\"\");\n\t\t\tif (!(this.isNumeric(s)) || // if it's non-numeric OR\n\t\t\t\t(s[0] === \"+\" && s[0] === \"-\")) {\t\t\t// It's an arithmatic string (eg +/-1000)\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (s.length < 5 && s.indexOf(\".\") < 0 && s.indexOf(\"/\") < 0) { // assume it's just a year.\n\t\t\t\ttime.year = s;\n\t\t\t\treturn $P.processTimeObject(time);\n\t\t\t}\n\t\t\tdata = s.match(this.regex);\n\t\t\tif (!data || !data.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor (i=0; i < order.length; i++) {\n\t\t\t\tswitch(order[i]) {\n\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\ttime.day = data[i+1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"m\":\n\t\t\t\t\t\ttime.month = (data[i+1]-1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"y\":\n\t\t\t\t\t\ttime.year = data[i+1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $P.processTimeObject(time);\n\t\t}\n\t};\n\n\t$P.Normalizer = {\n\t\tregexData: function () {\n\t\t\tvar $R = Date.CultureInfo.regexPatterns;\n\t\t\treturn utils.buildRegexData([\n\t\t\t\t$R.tomorrow,\n\t\t\t\t$R.yesterday,\n\t\t\t\t[$R.past, $R.mon],\n\t\t\t\t[$R.past, $R.tue],\n\t\t\t\t[$R.past, $R.wed],\n\t\t\t\t[$R.past, $R.thu],\n\t\t\t\t[$R.past, $R.fri],\n\t\t\t\t[$R.past, $R.sat],\n\t\t\t\t[$R.past, $R.sun]\n\t\t\t]);\n\t\t},\n\t\tbasicReplaceHash : function() {\n\t\t\tvar $R = Date.CultureInfo.regexPatterns;\n\t\t\treturn {\n\t\t\t\t\"January\": $R.jan.source,\n\t\t\t\t\"February\": $R.feb,\n\t\t\t\t\"March\": $R.mar,\n\t\t\t\t\"April\": $R.apr,\n\t\t\t\t\"May\": $R.may,\n\t\t\t\t\"June\": $R.jun,\n\t\t\t\t\"July\": $R.jul,\n\t\t\t\t\"August\": $R.aug,\n\t\t\t\t\"September\": $R.sep,\n\t\t\t\t\"October\": $R.oct,\n\t\t\t\t\"November\": $R.nov,\n\t\t\t\t\"December\": $R.dec,\n\t\t\t\t\"\": /\\bat\\b/gi,\n\t\t\t\t\" \": /\\s{2,}/,\n\t\t\t\t\"am\": $R.inTheMorning,\n\t\t\t\t\"9am\": $R.thisMorning,\n\t\t\t\t\"pm\": $R.inTheEvening,\n\t\t\t\t\"7pm\":$R.thisEvening\n\t\t\t};\n\t\t},\n\t\tkeys : function(){\n\t\t\treturn [\n\t\t\t\tutils.getDateNthString(true, false, 1),\t\t\t\t// tomorrow\n\t\t\t\tutils.getDateNthString(true, false, -1),\t\t\t// yesterday\n\t\t\t\tutils.getDateNthString(false, true, \"monday\"),\t\t//last mon\n\t\t\t\tutils.getDateNthString(false, true, \"tuesday\"),\t\t//last tues\n\t\t\t\tutils.getDateNthString(false, true, \"wednesday\"),\t//last wed\n\t\t\t\tutils.getDateNthString(false, true, \"thursday\"),\t//last thurs\n\t\t\t\tutils.getDateNthString(false, true, \"friday\"),\t\t//last fri\n\t\t\t\tutils.getDateNthString(false, true, \"saturday\"),\t//last sat\n\t\t\t\tutils.getDateNthString(false, true, \"sunday\")\t\t//last sun\n\t\t\t];\n\t\t},\n\t\tbuildRegexFunctions: function () {\n\t\t\tvar $R = Date.CultureInfo.regexPatterns;\n\t\t\tvar __ = Date.i18n.__;\n\t\t\tvar tomorrowRE = new RegExp(\"(\\\\b\\\\d\\\\d?(\"+__(\"AM\")+\"|\"+__(\"PM\")+\")? )(\"+$R.tomorrow.source.slice(1)+\")\", \"i\"); // adapted tomorrow regex for AM PM relative dates\n\t\t\tvar todayRE = new RegExp($R.today.source + \"(?!\\\\s*([+-]))\\\\b\"); // today, but excludes the math operators (eg \"today + 2h\")\n\n\t\t\tthis.replaceFuncs = [\n\t\t\t\t[todayRE, function (full) {\n\t\t\t\t\treturn (full.length > 1) ? Date.today().toString(\"d\") : full;\n\t\t\t\t}],\n\t\t\t\t[tomorrowRE,\n\t\t\t\tfunction(full, m1) {\n\t\t\t\t\tvar t = Date.today().addDays(1).toString(\"d\");\n\t\t\t\t\treturn (t + \" \" + m1);\n\t\t\t\t}],\n\t\t\t\t[$R.amThisMorning, function(str, am){return am;}],\n\t\t\t\t[$R.pmThisEvening, function(str, pm){return pm;}]\n\t\t\t];\n\n\t\t},\n\t\tbuildReplaceData: function () {\n\t\t\tthis.buildRegexFunctions();\n\t\t\tthis.replaceHash = utils.addToHash(this.basicReplaceHash(), this.keys(), this.regexData());\n\t\t},\n\t\tstringReplaceFuncs: function (s) {\n\t\t\tfor (var i=0; i < this.replaceFuncs.length; i++) {\n\t\t\t\ts = s.replace(this.replaceFuncs[i][0], this.replaceFuncs[i][1]);\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\tparse: function (s) {\n\t\t\ts = this.stringReplaceFuncs(s);\n\t\t\ts = utils.multiReplace(s, this.replaceHash);\n\n\t\t\ttry {\n\t\t\t\tvar n = s.split(/([\\s\\-\\.\\,\\/\\x27]+)/);\n\t\t\t\tif (n.length === 3 &&\n\t\t\t\t\t$P.Numeric.isNumeric(n[0]) &&\n\t\t\t\t\t$P.Numeric.isNumeric(n[2]) &&\n\t\t\t\t\t(n[2].length >= 4)) {\n\t\t\t\t\t\t// ok, so we're dealing with x/year. But that's not a full date.\n\t\t\t\t\t\t// This fixes wonky dateElementOrder parsing when set to dmy order.\n\t\t\t\t\t\tif (Date.CultureInfo.dateElementOrder[0] === \"d\") {\n\t\t\t\t\t\t\ts = \"1/\" + n[0] + \"/\" + n[2]; // set to 1st of month and normalize the seperator\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\n\t\t\treturn s;\n\t\t}\n\t};\n\t$P.Normalizer.buildReplaceData();\n}());","(function () {\n\tvar $P = Date.Parsing;\n\tvar _ = $P.Operators = {\n\t\t//\n\t\t// Tokenizers\n\t\t//\n\t\trtoken: function (r) { // regex token\n\t\t\treturn function (s) {\n\t\t\t\tvar mx = s.match(r);\n\t\t\t\tif (mx) {\n\t\t\t\t\treturn ([ mx[0], s.substring(mx[0].length) ]);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new $P.Exception(s);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\ttoken: function () { // whitespace-eating token\n\t\t\treturn function (s) {\n\t\t\t\treturn _.rtoken(new RegExp(\"^\\\\s*\" + s + \"\\\\s*\"))(s);\n\t\t\t};\n\t\t},\n\t\tstoken: function (s) { // string token\n\t\t\treturn _.rtoken(new RegExp(\"^\" + s));\n\t\t},\n\n\t\t// Atomic Operators\n\n\t\tuntil: function (p) {\n\t\t\treturn function (s) {\n\t\t\t\tvar qx = [], rx = null;\n\t\t\t\twhile (s.length) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\trx = p.call(this, s);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tqx.push(rx[0]);\n\t\t\t\t\t\ts = rx[1];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn [ qx, s ];\n\t\t\t};\n\t\t},\n\t\tmany: function (p) {\n\t\t\treturn function (s) {\n\t\t\t\tvar rx = [], r = null;\n\t\t\t\twhile (s.length) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tr = p.call(this, s);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn [ rx, s ];\n\t\t\t\t\t}\n\t\t\t\t\trx.push(r[0]);\n\t\t\t\t\ts = r[1];\n\t\t\t\t}\n\t\t\t\treturn [ rx, s ];\n\t\t\t};\n\t\t},\n\n\t\t// generator operators -- see below\n\t\toptional: function (p) {\n\t\t\treturn function (s) {\n\t\t\t\tvar r = null;\n\t\t\t\ttry {\n\t\t\t\t\tr = p.call(this, s);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn [ null, s ];\n\t\t\t\t}\n\t\t\t\treturn [ r[0], r[1] ];\n\t\t\t};\n\t\t},\n\t\tnot: function (p) {\n\t\t\treturn function (s) {\n\t\t\t\ttry {\n\t\t\t\t\tp.call(this, s);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn [null, s];\n\t\t\t\t}\n\t\t\t\tthrow new $P.Exception(s);\n\t\t\t};\n\t\t},\n\t\tignore: function (p) {\n\t\t\treturn p ?\n\t\t\tfunction (s) {\n\t\t\t\tvar r = null;\n\t\t\t\tr = p.call(this, s);\n\t\t\t\treturn [null, r[1]];\n\t\t\t} : null;\n\t\t},\n\t\tproduct: function () {\n\t\t\tvar px = arguments[0],\n\t\t\tqx = Array.prototype.slice.call(arguments, 1), rx = [];\n\t\t\tfor (var i = 0 ; i < px.length ; i++) {\n\t\t\t\trx.push(_.each(px[i], qx));\n\t\t\t}\n\t\t\treturn rx;\n\t\t},\n\t\tcache: function (rule) {\n\t\t\tvar cache = {}, cache_length = 0, cache_keys = [], CACHE_MAX = Date.Config.CACHE_MAX || 100000, r = null;\n\t\t\tvar cacheCheck = function () {\n\t\t\t\tif (cache_length === CACHE_MAX) {\n\t\t\t\t\t// kill several keys, don't want to have to do this all the time...\n\t\t\t\t\tfor (var i=0; i < 10; i++) {\n\t\t\t\t\t\tvar key = cache_keys.shift();\n\t\t\t\t\t\tif (key) {\n\t\t\t\t\t\t\tdelete cache[key];\n\t\t\t\t\t\t\tcache_length--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn function (s) {\n\t\t\t\tcacheCheck();\n\t\t\t\ttry {\n\t\t\t\t\tr = cache[s] = (cache[s] || rule.call(this, s));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tr = cache[s] = e;\n\t\t\t\t}\n\t\t\t\tcache_length++;\n\t\t\t\tcache_keys.push(s);\n\t\t\t\tif (r instanceof $P.Exception) {\n\t\t\t\t\tthrow r;\n\t\t\t\t} else {\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\t// vector operators -- see below\n\t\tany: function () {\n\t\t\tvar px = arguments;\n\t\t\treturn function (s) {\n\t\t\t\tvar r = null;\n\t\t\t\tfor (var i = 0; i < px.length; i++) {\n\t\t\t\t\tif (px[i] == null) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tr = (px[i].call(this, s));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tr = null;\n\t\t\t\t\t}\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow new $P.Exception(s);\n\t\t\t};\n\t\t},\n\t\teach: function () {\n\t\t\tvar px = arguments;\n\t\t\treturn function (s) {\n\t\t\t\tvar rx = [], r = null;\n\t\t\t\tfor (var i = 0; i < px.length ; i++) {\n\t\t\t\t\tif (px[i] == null) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tr = (px[i].call(this, s));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthrow new $P.Exception(s);\n\t\t\t\t\t}\n\t\t\t\t\trx.push(r[0]);\n\t\t\t\t\ts = r[1];\n\t\t\t\t}\n\t\t\t\treturn [ rx, s];\n\t\t\t};\n\t\t},\n\t\tall: function () {\n\t\t\tvar px = arguments, _ = _;\n\t\t\treturn _.each(_.optional(px));\n\t\t},\n\n\t\t// delimited operators\n\t\tsequence: function (px, d, c) {\n\t\t\td = d || _.rtoken(/^\\s*/);\n\t\t\tc = c || null;\n\t\t\t\n\t\t\tif (px.length === 1) {\n\t\t\t\treturn px[0];\n\t\t\t}\n\t\t\treturn function (s) {\n\t\t\t\tvar r = null, q = null;\n\t\t\t\tvar rx = [];\n\t\t\t\tfor (var i = 0; i < px.length ; i++) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tr = px[i].call(this, s);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\trx.push(r[0]);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tq = d.call(this, r[1]);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tq = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ts = q[1];\n\t\t\t\t}\n\t\t\t\tif (!r) {\n\t\t\t\t\tthrow new $P.Exception(s);\n\t\t\t\t}\n\t\t\t\tif (q) {\n\t\t\t\t\tthrow new $P.Exception(q[1]);\n\t\t\t\t}\n\t\t\t\tif (c) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tr = c.call(this, r[1]);\n\t\t\t\t\t} catch (ey) {\n\t\t\t\t\t\tthrow new $P.Exception(r[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [ rx, (r?r[1]:s) ];\n\t\t\t};\n\t\t},\n\n\t\t//\n\t\t// Composite Operators\n\t\t//\n\n\t\tbetween: function (d1, p, d2) {\n\t\t\td2 = d2 || d1;\n\t\t\tvar _fn = _.each(_.ignore(d1), p, _.ignore(d2));\n\t\t\treturn function (s) {\n\t\t\t\tvar rx = _fn.call(this, s);\n\t\t\t\treturn [[rx[0][0], r[0][2]], rx[1]];\n\t\t\t};\n\t\t},\n\t\tlist: function (p, d, c) {\n\t\t\td = d || _.rtoken(/^\\s*/);\n\t\t\tc = c || null;\n\t\t\treturn (p instanceof Array ?\n\t\t\t\t_.each(_.product(p.slice(0, -1), _.ignore(d)), p.slice(-1), _.ignore(c)) :\n\t\t\t\t_.each(_.many(_.each(p, _.ignore(d))), px, _.ignore(c)));\n\t\t},\n\t\tset: function (px, d, c) {\n\t\t\td = d || _.rtoken(/^\\s*/);\n\t\t\tc = c || null;\n\t\t\treturn function (s) {\n\t\t\t\t// r is the current match, best the current 'best' match\n\t\t\t\t// which means it parsed the most amount of input\n\t\t\t\tvar r = null, p = null, q = null, rx = null, best = [[], s], last = false;\n\t\t\t\t// go through the rules in the given set\n\t\t\t\tfor (var i = 0; i < px.length ; i++) {\n\n\t\t\t\t\t// last is a flag indicating whether this must be the last element\n\t\t\t\t\t// if there is only 1 element, then it MUST be the last one\n\t\t\t\t\tq = null;\n\t\t\t\t\tp = null;\n\t\t\t\t\tr = null;\n\t\t\t\t\tlast = (px.length === 1);\n\t\t\t\t\t// first, we try simply to match the current pattern\n\t\t\t\t\t// if not, try the next pattern\n\t\t\t\t\ttry {\n\t\t\t\t\t\tr = px[i].call(this, s);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// since we are matching against a set of elements, the first\n\t\t\t\t\t// thing to do is to add r[0] to matched elements\n\t\t\t\t\trx = [[r[0]], r[1]];\n\t\t\t\t\t// if we matched and there is still input to parse and \n\t\t\t\t\t// we don't already know this is the last element,\n\t\t\t\t\t// we're going to next check for the delimiter ...\n\t\t\t\t\t// if there's none, or if there's no input left to parse\n\t\t\t\t\t// than this must be the last element after all ...\n\t\t\t\t\tif (r[1].length > 0 && ! last) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tq = d.call(this, r[1]);\n\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\tlast = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if we parsed the delimiter and now there's no more input,\n\t\t\t\t\t// that means we shouldn't have parsed the delimiter at all\n\t\t\t\t\t// so don't update r and mark this as the last element ...\n\t\t\t\t\tif (!last && q[1].length === 0) {\n\t\t\t\t\t\tlast = true;\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// so, if this isn't the last element, we're going to see if\n\t\t\t\t\t// we can get any more matches from the remaining (unmatched)\n\t\t\t\t\t// elements ...\n\t\t\t\t\tif (!last) {\n\t\t\t\t\t\t// build a list of the remaining rules we can match against,\n\t\t\t\t\t\t// i.e., all but the one we just matched against\n\t\t\t\t\t\tvar qx = [];\n\t\t\t\t\t\tfor (var j = 0; j < px.length ; j++) {\n\t\t\t\t\t\t\tif (i !== j) {\n\t\t\t\t\t\t\t\tqx.push(px[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// now invoke recursively set with the remaining input\n\t\t\t\t\t\t// note that we don't include the closing delimiter ...\n\t\t\t\t\t\t// we'll check for that ourselves at the end\n\t\t\t\t\t\tp = _.set(qx, d).call(this, q[1]);\n\n\t\t\t\t\t\t// if we got a non-empty set as a result ...\n\t\t\t\t\t\t// (otw rx already contains everything we want to match)\n\t\t\t\t\t\tif (p[0].length > 0) {\n\t\t\t\t\t\t\t// update current result, which is stored in rx ...\n\t\t\t\t\t\t\t// basically, pick up the remaining text from p[1]\n\t\t\t\t\t\t\t// and concat the result from p[0] so that we don't\n\t\t\t\t\t\t\t// get endless nesting ...\n\t\t\t\t\t\t\trx[0] = rx[0].concat(p[0]);\n\t\t\t\t\t\t\trx[1] = p[1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// at this point, rx either contains the last matched element\n\t\t\t\t\t// or the entire matched set that starts with this element.\n\n\t\t\t\t\t// now we just check to see if this variation is better than\n\t\t\t\t\t// our best so far, in terms of how much of the input is parsed\n\t\t\t\t\tif (rx[1].length < best[1].length) {\n\t\t\t\t\t\tbest = rx;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if we've parsed all the input, then we're finished\n\t\t\t\t\tif (best[1].length === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// so now we've either gone through all the patterns trying them\n\t\t\t\t// as the initial match; or we found one that parsed the entire\n\t\t\t\t// input string ...\n\n\t\t\t\t// if best has no matches, just return empty set ...\n\t\t\t\tif (best[0].length === 0) {\n\t\t\t\t\treturn best;\n\t\t\t\t}\n\n\t\t\t\t// if a closing delimiter is provided, then we have to check it also\n\t\t\t\tif (c) {\n\t\t\t\t\t// we try this even if there is no remaining input because the pattern\n\t\t\t\t\t// may well be optional or match empty input ...\n\t\t\t\t\ttry {\n\t\t\t\t\t\tq = c.call(this, best[1]);\n\t\t\t\t\t} catch (ey) {\n\t\t\t\t\t\tthrow new $P.Exception(best[1]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// it parsed ... be sure to update the best match remaining input\n\t\t\t\t\tbest[1] = q[1];\n\t\t\t\t}\n\t\t\t\t// if we're here, either there was no closing delimiter or we parsed it\n\t\t\t\t// so now we have the best match; just return it!\n\t\t\t\treturn best;\n\t\t\t};\n\t\t},\n\t\tforward: function (gr, fname) {\n\t\t\treturn function (s) {\n\t\t\t\treturn gr[fname].call(this, s);\n\t\t\t};\n\t\t},\n\n\t\t//\n\t\t// Translation Operators\n\t\t//\n\t\treplace: function (rule, repl) {\n\t\t\treturn function (s) {\n\t\t\t\tvar r = rule.call(this, s);\n\t\t\t\treturn [repl, r[1]];\n\t\t\t};\n\t\t},\n\t\tprocess: function (rule, fn) {\n\t\t\treturn function (s) {\n\t\t\t\tvar r = rule.call(this, s);\n\t\t\t\treturn [fn.call(this, r[0]), r[1]];\n\t\t\t};\n\t\t},\n\t\tmin: function (min, rule) {\n\t\t\treturn function (s) {\n\t\t\t\tvar rx = rule.call(this, s);\n\t\t\t\tif (rx[0].length < min) {\n\t\t\t\t\tthrow new $P.Exception(s);\n\t\t\t\t}\n\t\t\t\treturn rx;\n\t\t\t};\n\t\t}\n\t};\n\t\n\n\t// Generator Operators And Vector Operators\n\n\t// Generators are operators that have a signature of F(R) => R,\n\t// taking a given rule and returning another rule, such as \n\t// ignore, which parses a given rule and throws away the result.\n\n\t// Vector operators are those that have a signature of F(R1,R2,...) => R,\n\t// take a list of rules and returning a new rule, such as each.\n\n\t// Generator operators are converted (via the following _generator\n\t// function) into functions that can also take a list or array of rules\n\t// and return an array of new rules as though the function had been\n\t// called on each rule in turn (which is what actually happens).\n\n\t// This allows generators to be used with vector operators more easily.\n\t// Example:\n\t// each(ignore(foo, bar)) instead of each(ignore(foo), ignore(bar))\n\n\t// This also turns generators into vector operators, which allows\n\t// constructs like:\n\t// not(cache(foo, bar))\n\t\n\tvar _generator = function (op) {\n\t\tfunction gen() {\n\t\t\tvar args = null, rx = [], px, i;\n\t\t\tif (arguments.length > 1) {\n\t\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t\t} else if (arguments[0] instanceof Array) {\n\t\t\t\targs = arguments[0];\n\t\t\t}\n\t\t\tif (args) {\n\t\t\t\tpx = args.shift();\n\t\t\t\tif (px.length > 0) {\n\t\t\t\t\targs.unshift(px[i]);\n\t\t\t\t\trx.push(op.apply(null, args));\n\t\t\t\t\targs.shift();\n\t\t\t\t\treturn rx;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn op.apply(null, arguments);\n\t\t\t}\n\t\t}\n\n\t\treturn gen;\n\t};\n\t\n\tvar gx = \"optional not ignore cache\".split(/\\s/);\n\t\n\tfor (var i = 0 ; i < gx.length ; i++) {\n\t\t_[gx[i]] = _generator(_[gx[i]]);\n\t}\n\n\tvar _vector = function (op) {\n\t\treturn function () {\n\t\t\tif (arguments[0] instanceof Array) {\n\t\t\t\treturn op.apply(null, arguments[0]);\n\t\t\t} else {\n\t\t\t\treturn op.apply(null, arguments);\n\t\t\t}\n\t\t};\n\t};\n\t\n\tvar vx = \"each any all\".split(/\\s/);\n\t\n\tfor (var j = 0 ; j < vx.length ; j++) {\n\t\t_[vx[j]] = _vector(_[vx[j]]);\n\t}\n\t\n}());","(function () {\n\tvar $D = Date;\n\n\tvar flattenAndCompact = function (ax) {\n\t\tvar rx = [];\n\t\tfor (var i = 0; i < ax.length; i++) {\n\t\t\tif (ax[i] instanceof Array) {\n\t\t\t\trx = rx.concat(flattenAndCompact(ax[i]));\n\t\t\t} else {\n\t\t\t\tif (ax[i]) {\n\t\t\t\t\trx.push(ax[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn rx;\n\t};\n\n\tvar parseMeridian = function () {\n\t\tif (this.meridian && (this.hour || this.hour === 0)) {\n\t\t\tif (this.meridian === \"a\" && this.hour > 11 && Date.Config.strict24hr){\n\t\t\t\tthrow \"Invalid hour and meridian combination\";\n\t\t\t} else if (this.meridian === \"p\" && this.hour < 12 && Date.Config.strict24hr){\n\t\t\t\tthrow \"Invalid hour and meridian combination\";\n\t\t\t} else if (this.meridian === \"p\" && this.hour < 12) {\n\t\t\t\tthis.hour = this.hour + 12;\n\t\t\t} else if (this.meridian === \"a\" && this.hour === 12) {\n\t\t\t\tthis.hour = 0;\n\t\t\t}\n\t\t}\n\t};\n\n\tvar setDefaults = function () {\n\t\tvar now = new Date();\n\t\tif ((this.hour || this.minute) && (!this.month && !this.year && !this.day)) {\n\t\t\tthis.day = now.getDate();\n\t\t}\n\n\t\tif (!this.year) {\n\t\t\tthis.year = now.getFullYear();\n\t\t}\n\t\t\n\t\tif (!this.month && this.month !== 0) {\n\t\t\tthis.month = now.getMonth();\n\t\t}\n\t\t\n\t\tif (!this.day) {\n\t\t\tthis.day = 1;\n\t\t}\n\t\t\n\t\tif (!this.hour) {\n\t\t\tthis.hour = 0;\n\t\t}\n\t\t\n\t\tif (!this.minute) {\n\t\t\tthis.minute = 0;\n\t\t}\n\n\t\tif (!this.second) {\n\t\t\tthis.second = 0;\n\t\t}\n\t\tif (!this.millisecond) {\n\t\t\tthis.millisecond = 0;\n\t\t}\n\t};\n\n\tvar finishUtils = {\n\t\tgetToday: function () {\n\t\t\t if (this.now || \"hour minute second\".indexOf(this.unit) !== -1) {\n\t\t\t\treturn new Date();\n\t\t\t} else {\n\t\t\t\treturn $D.today();\n\t\t\t}\n\t\t},\n\t\tsetDaysFromWeekday: function (today, orient){\n\t\t\tvar gap;\n\t\t\torient = orient || 1;\n\t\t\tthis.unit = \"day\";\n\t\t\tgap = ($D.getDayNumberFromName(this.weekday) - today.getDay());\n\t\t\tthis.days = gap ? ((gap + (orient * 7)) % 7) : (orient * 7);\n\t\t\treturn this;\n\t\t},\n\t\tsetMonthsFromMonth: function (today, orient) {\n\t\t\tvar gap;\n\t\t\torient = orient || 1;\n\t\t\tthis.unit = \"month\";\n\t\t\tgap = (this.month - today.getMonth());\n\t\t\tthis.months = gap ? ((gap + (orient * 12)) % 12) : (orient * 12);\n\t\t\tthis.month = null;\n\t\t\treturn this;\n\t\t},\n\t\tsetDMYFromWeekday: function () {\n\t\t\tvar d = Date[this.weekday]();\n\t\t\tthis.day = d.getDate();\n\t\t\tif (!this.month) {\n\t\t\t\tthis.month = d.getMonth();\n\t\t\t}\n\t\t\tthis.year = d.getFullYear();\n\t\t\treturn this;\n\t\t},\n\t\tsetUnitValue: function (orient) {\n\t\t\tif (!this.value && this.operator && this.operator !== null && this[this.unit + \"s\"] && this[this.unit + \"s\"] !== null) {\n\t\t\t\tthis[this.unit + \"s\"] = this[this.unit + \"s\"] + ((this.operator === \"add\") ? 1 : -1) + (this.value||0) * orient;\n\t\t\t} else if (this[this.unit + \"s\"] == null || this.operator != null) {\n\t\t\t\tif (!this.value) {\n\t\t\t\t\tthis.value = 1;\n\t\t\t\t}\n\t\t\t\tthis[this.unit + \"s\"] = this.value * orient;\n\t\t\t}\n\t\t},\n\t\tgenerateDateFromWeeks: function () {\n\t\t\tvar weekday = (this.weekday !== undefined) ? this.weekday : \"today\";\n\t\t\tvar d = Date[weekday]().addWeeks(this.weeks);\n\t\t\tif (this.now) {\n\t\t\t\td.setTimeToNow();\n\t\t\t}\n\t\t\treturn d;\n\t\t}\n\t};\n\n\t$D.Translator = {\n\t\thour: function (s) {\n\t\t\treturn function () {\n\t\t\t\tthis.hour = Number(s);\n\t\t\t};\n\t\t},\n\t\tminute: function (s) {\n\t\t\treturn function () {\n\t\t\t\tthis.minute = Number(s);\n\t\t\t};\n\t\t},\n\t\tsecond: function (s) {\n\t\t\treturn function () {\n\t\t\t\tthis.second = Number(s);\n\t\t\t};\n\t\t},\n\t\t/* for ss.s format */\n\t\tsecondAndMillisecond: function (s) {\n\t\t\treturn function () {\n\t\t\t\tvar mx = s.match(/^([0-5][0-9])\\.([0-9]{1,3})/);\n\t\t\t\tthis.second = Number(mx[1]);\n\t\t\t\tthis.millisecond = Number(mx[2]);\n\t\t\t};\n\t\t},\n\t\tmeridian: function (s) {\n\t\t\treturn function () {\n\t\t\t\tthis.meridian = s.slice(0, 1).toLowerCase();\n\t\t\t};\n\t\t},\n\t\ttimezone: function (s) {\n\t\t\treturn function () {\n\t\t\t\tvar n = s.replace(/[^\\d\\+\\-]/g, \"\");\n\t\t\t\tif (n.length) {\n\t\t\t\t\tthis.timezoneOffset = Number(n);\n\t\t\t\t} else {\n\t\t\t\t\tthis.timezone = s.toLowerCase();\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tday: function (x) {\n\t\t\tvar s = x[0];\n\t\t\treturn function () {\n\t\t\t\tthis.day = Number(s.match(/\\d+/)[0]);\n\t\t\t\tif (this.day < 1) {\n\t\t\t\t\tthrow \"invalid day\";\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tmonth: function (s) {\n\t\t\treturn function () {\n\t\t\t\tthis.month = (s.length === 3) ? \"jan feb mar apr may jun jul aug sep oct nov dec\".indexOf(s)/4 : Number(s) - 1;\n\t\t\t\tif (this.month < 0) {\n\t\t\t\t\tthrow \"invalid month\";\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tyear: function (s) {\n\t\t\treturn function () {\n\t\t\t\tvar n = Number(s);\n\t\t\t\tthis.year = ((s.length > 2) ? n :\n\t\t\t\t\t(n + (((n + 2000) < Date.CultureInfo.twoDigitYearMax) ? 2000 : 1900)));\n\t\t\t};\n\t\t},\n\t\trday: function (s) {\n\t\t\treturn function () {\n\t\t\t\tswitch (s) {\n\t\t\t\t\tcase \"yesterday\":\n\t\t\t\t\t\tthis.days = -1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"tomorrow\":\n\t\t\t\t\t\tthis.days = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"today\":\n\t\t\t\t\t\tthis.days = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"now\":\n\t\t\t\t\t\tthis.days = 0;\n\t\t\t\t\t\tthis.now = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tfinishExact: function (x) {\n\t\t\tvar d;\n\t\t\tx = (x instanceof Array) ? x : [x];\n\n\t\t\tfor (var i = 0 ; i < x.length ; i++) {\n\t\t\t\tif (x[i]) {\n\t\t\t\t\tx[i].call(this);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsetDefaults.call(this);\n\t\t\tparseMeridian.call(this);\n\n\t\t\tif (this.day > $D.getDaysInMonth(this.year, this.month)) {\n\t\t\t\tthrow new RangeError(this.day + \" is not a valid value for days.\");\n\t\t\t}\n\n\t\t\td = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n\t\t\tif (this.year < 100) {\n\t\t\t\td.setFullYear(this.year); // means years less that 100 are process correctly. JS will parse it otherwise as 1900-1999.\n\t\t\t}\n\t\t\tif (this.timezone) {\n\t\t\t\td.set({ timezone: this.timezone });\n\t\t\t} else if (this.timezoneOffset) {\n\t\t\t\td.set({ timezoneOffset: this.timezoneOffset });\n\t\t\t}\n\t\t\t\n\t\t\treturn d;\n\t\t},\n\t\tfinish: function (x) {\n\t\t\tvar today, expression, orient, temp;\n\n\t\t\tx = (x instanceof Array) ? flattenAndCompact(x) : [ x ];\n\n\t\t\tif (x.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfor (var i = 0 ; i < x.length ; i++) {\n\t\t\t\tif (typeof x[i] === \"function\") {\n\t\t\t\t\tx[i].call(this);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.now && !this.unit && !this.operator) {\n\t\t\t\treturn new Date();\n\t\t\t} else {\n\t\t\t\ttoday = finishUtils.getToday.call(this);\n\t\t\t}\n\t\t\t\n\t\t\texpression = !!(this.days && this.days !== null || this.orient || this.operator);\n\t\t\torient = ((this.orient === \"past\" || this.operator === \"subtract\") ? -1 : 1);\n\n\t\t\tif (this.month && this.unit === \"week\") {\n\t\t\t\tthis.value = this.month + 1;\n\t\t\t\tdelete this.month;\n\t\t\t\tdelete this.day;\n\t\t\t}\n\n\t\t\tif ((this.month || this.month === 0) && \"year day hour minute second\".indexOf(this.unit) !== -1) {\n\t\t\t\tif (!this.value) {\n\t\t\t\t\tthis.value = this.month + 1;\n\t\t\t\t}\n\t\t\t\tthis.month = null;\n\t\t\t\texpression = true;\n\t\t\t}\n\n\t\t\tif (!expression && this.weekday && !this.day && !this.days) {\n\t\t\t\tfinishUtils.setDMYFromWeekday.call(this);\n\t\t\t}\n\n\t\t\tif (expression && this.weekday && this.unit !== \"month\" && this.unit !== \"week\") {\n\t\t\t\tfinishUtils.setDaysFromWeekday.call(this, today, orient);\n\t\t\t}\n\n\t\t\tif (this.weekday && this.unit !== \"week\" && !this.day && !this.days) {\n\t\t\t\ttemp = Date[this.weekday]();\n\t\t\t\tthis.day = temp.getDate();\n\t\t\t\tif (temp.getMonth() !== today.getMonth()) {\n\t\t\t\t\tthis.month = temp.getMonth();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.month && this.unit === \"day\" && this.operator) {\n\t\t\t\tif (!this.value) {\n\t\t\t\t\tthis.value = (this.month + 1);\n\t\t\t\t}\n\t\t\t\tthis.month = null;\n\t\t\t}\n\n\t\t\tif (this.value != null && this.month != null && this.year != null) {\n\t\t\t\tthis.day = this.value * 1;\n\t\t\t}\n\n\t\t\tif (this.month && !this.day && this.value) {\n\t\t\t\ttoday.set({ day: this.value * 1 });\n\t\t\t\tif (!expression) {\n\t\t\t\t\tthis.day = this.value * 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.month && this.value && this.unit === \"month\" && !this.now) {\n\t\t\t\tthis.month = this.value;\n\t\t\t\texpression = true;\n\t\t\t}\n\n\t\t\tif (expression && (this.month || this.month === 0) && this.unit !== \"year\") {\n\t\t\t\tfinishUtils.setMonthsFromMonth.call(this, today, orient);\n\t\t\t}\n\n\t\t\tif (!this.unit) {\n\t\t\t\tthis.unit = \"day\";\n\t\t\t}\n\n\t\t\tfinishUtils.setUnitValue.call(this, orient);\n\t\t\tparseMeridian.call(this);\n\t\t\t\n\t\t\tif ((this.month || this.month === 0) && !this.day) {\n\t\t\t\tthis.day = 1;\n\t\t\t}\n\n\t\t\tif (!this.orient && !this.operator && this.unit === \"week\" && this.value && !this.day && !this.month) {\n\t\t\t\treturn Date.today().setWeek(this.value);\n\t\t\t}\n\n\t\t\tif (this.unit === \"week\" && this.weeks && !this.day && !this.month) {\n\t\t\t\treturn finishUtils.generateDateFromWeeks.call(this);\n\t\t\t}\n\n\t\t\tif (expression && this.timezone && this.day && this.days) {\n\t\t\t\tthis.day = this.days;\n\t\t\t}\n\n\t\t\tif (expression){\n\t\t\t\ttoday.add(this);\n\t\t\t} else {\n\t\t\t\ttoday.set(this);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.timezone) {\n\t\t\t\tthis.timezone = this.timezone.toUpperCase();\n\t\t\t\tvar offset = $D.getTimezoneOffset(this.timezone);\n\t\t\t\tvar timezone;\n\t\t\t\tif (today.hasDaylightSavingTime()) {\n\t\t\t\t\t// lets check that we're being sane with timezone setting\n\t\t\t\t\ttimezone = $D.getTimezoneAbbreviation(offset, today.isDaylightSavingTime());\n\t\t\t\t\tif (timezone !== this.timezone) {\n\t\t\t\t\t\t// bugger, we're in a place where things like EST vs EDT matters.\n\t\t\t\t\t\tif (today.isDaylightSavingTime()) {\n\t\t\t\t\t\t\ttoday.addHours(-1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttoday.addHours(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttoday.setTimezoneOffset(offset);\n\t\t\t}\n\n\t\t\treturn today;\n\t\t}\n\t};\n}());","(function () {\n\tvar $D = Date;\n\t$D.Grammar = {};\n\tvar _ = $D.Parsing.Operators, g = $D.Grammar, t = $D.Translator, _fn;\n\t// Allow rolling up into general purpose rules\n\t_fn = function () {\n\t\treturn _.each(_.any.apply(null, arguments), _.not(g.ctoken2(\"timeContext\")));\n\t};\n\t\n\tg.datePartDelimiter = _.rtoken(/^([\\s\\-\\.\\,\\/\\x27]+)/);\n\tg.timePartDelimiter = _.stoken(\":\");\n\tg.whiteSpace = _.rtoken(/^\\s*/);\n\tg.generalDelimiter = _.rtoken(/^(([\\s\\,]|at|@|on)+)/);\n  \n\tvar _C = {};\n\tg.ctoken = function (keys) {\n\t\tvar fn = _C[keys];\n\t\tif (! fn) {\n\t\t\tvar c = Date.CultureInfo.regexPatterns;\n\t\t\tvar kx = keys.split(/\\s+/), px = [];\n\t\t\tfor (var i = 0; i < kx.length ; i++) {\n\t\t\t\tpx.push(_.replace(_.rtoken(c[kx[i]]), kx[i]));\n\t\t\t}\n\t\t\tfn = _C[keys] = _.any.apply(null, px);\n\t\t}\n\t\treturn fn;\n\t};\n\tg.ctoken2 = function (key) {\n\t\treturn _.rtoken(Date.CultureInfo.regexPatterns[key]);\n\t};\n\tvar cacheProcessRtoken = function (key, token, type, eachToken) {\n\t\tif (eachToken) {\n\t\t\tg[key] = _.cache(_.process(_.each(_.rtoken(token),_.optional(g.ctoken2(eachToken))), type));\n\t\t} else {\n\t\t\tg[key] = _.cache(_.process(_.rtoken(token), type));\n\t\t}\n\t};\n\tvar cacheProcessCtoken = function (token, type) {\n\t\treturn _.cache(_.process(g.ctoken2(token), type));\n\t};\n\tvar _F = {}; //function cache\n\n\tvar _get = function (f) {\n\t\t_F[f] = (_F[f] || g.format(f)[0]);\n\t\treturn _F[f];\n\t};\n\n\tg.allformats = function (fx) {\n\t\tvar rx = [];\n\t\tif (fx instanceof Array) {\n\t\t\tfor (var i = 0; i < fx.length; i++) {\n\t\t\t\trx.push(_get(fx[i]));\n\t\t\t}\n\t\t} else {\n\t\t\trx.push(_get(fx));\n\t\t}\n\t\treturn rx;\n\t};\n  \n\tg.formats = function (fx) {\n\t\tif (fx instanceof Array) {\n\t\t\tvar rx = [];\n\t\t\tfor (var i = 0 ; i < fx.length ; i++) {\n\t\t\t\trx.push(_get(fx[i]));\n\t\t\t}\n\t\t\treturn _.any.apply(null, rx);\n\t\t} else {\n\t\t\treturn _get(fx);\n\t\t}\n\t};\n\n\tvar grammarFormats = {\n\t\t timeFormats: function(){\n\t\t\tvar i,\n\t\t\tRTokenKeys = [\n\t\t\t\t\"h\",\n\t\t\t\t\"hh\",\n\t\t\t\t\"H\",\n\t\t\t\t\"HH\",\n\t\t\t\t\"m\",\n\t\t\t\t\"mm\",\n\t\t\t\t\"s\",\n\t\t\t\t\"ss\",\n\t\t\t\t\"ss.s\",\n\t\t\t\t\"z\",\n\t\t\t\t\"zz\"\n\t\t\t],\n\t\t\tRToken = [\n\t\t\t\t/^(0[0-9]|1[0-2]|[1-9])/,\n\t\t\t\t/^(0[0-9]|1[0-2])/,\n\t\t\t\t/^([0-1][0-9]|2[0-3]|[0-9])/,\n\t\t\t\t/^([0-1][0-9]|2[0-3])/,\n\t\t\t\t/^([0-5][0-9]|[0-9])/,\n\t\t\t\t/^[0-5][0-9]/,\n\t\t\t\t/^([0-5][0-9]|[0-9])/,\n\t\t\t\t/^[0-5][0-9]/,\n\t\t\t\t/^[0-5][0-9]\\.[0-9]{1,3}/,\n\t\t\t\t/^((\\+|\\-)\\s*\\d\\d\\d\\d)|((\\+|\\-)\\d\\d\\:?\\d\\d)/,\n\t\t\t\t/^((\\+|\\-)\\s*\\d\\d\\d\\d)|((\\+|\\-)\\d\\d\\:?\\d\\d)/\n\t\t\t],\n\t\t\ttokens = [\n\t\t\t\tt.hour,\n\t\t\t\tt.hour,\n\t\t\t\tt.hour,\n\t\t\t\tt.minute,\n\t\t\t\tt.minute,\n\t\t\t\tt.second,\n\t\t\t\tt.second,\n\t\t\t\tt.secondAndMillisecond,\n\t\t\t\tt.timezone,\n\t\t\t\tt.timezone,\n\t\t\t\tt.timezone\n\t\t\t];\n\n\t\t\tfor (i=0; i < RTokenKeys.length; i++) {\n\t\t\t\tcacheProcessRtoken(RTokenKeys[i], RToken[i], tokens[i]);\n\t\t\t}\n\n\t\t\tg.hms = _.cache(_.sequence([g.H, g.m, g.s], g.timePartDelimiter));\n\n\t\t\tg.t = cacheProcessCtoken(\"shortMeridian\", t.meridian);\n\t\t\tg.tt = cacheProcessCtoken(\"longMeridian\", t.meridian);\n\t\t\tg.zzz = cacheProcessCtoken(\"timezone\", t.timezone);\n\n\t\t\tg.timeSuffix = _.each(_.ignore(g.whiteSpace), _.set([ g.tt, g.zzz ]));\n\t\t\tg.time = _.each(_.optional(_.ignore(_.stoken(\"T\"))), g.hms, g.timeSuffix);\n\t\t },\n\t\t dateFormats: function () {\n\t\t\t// pre-loaded rules for different date part order preferences\n\t\t\tvar _setfn = function () {\n\t\t\t\treturn  _.set(arguments, g.datePartDelimiter);\n\t\t\t};\n\t\t\tvar i,\n\t\t\tRTokenKeys = [\n\t\t\t\t\"d\",\n\t\t\t\t\"dd\",\n\t\t\t\t\"M\",\n\t\t\t\t\"MM\",\n\t\t\t\t\"y\",\n\t\t\t\t\"yy\",\n\t\t\t\t\"yyy\",\n\t\t\t\t\"yyyy\"\n\t\t\t],\n\t\t\tRToken = [\n\t\t\t\t/^([0-2]\\d|3[0-1]|\\d)/,\n\t\t\t\t/^([0-2]\\d|3[0-1])/,\n\t\t\t\t/^(1[0-2]|0\\d|\\d)/,\n\t\t\t\t/^(1[0-2]|0\\d)/,\n\t\t\t\t/^(\\d+)/,\n\t\t\t\t/^(\\d\\d)/,\n\t\t\t\t/^(\\d\\d?\\d?\\d?)/,\n\t\t\t\t/^(\\d\\d\\d\\d)/\n\t\t\t],\n\t\t\ttokens = [\n\t\t\t\tt.day,\n\t\t\t\tt.day,\n\t\t\t\tt.month,\n\t\t\t\tt.month,\n\t\t\t\tt.year,\n\t\t\t\tt.year,\n\t\t\t\tt.year,\n\t\t\t\tt.year\n\t\t\t],\n\t\t\teachToken = [\n\t\t\t\t\"ordinalSuffix\",\n\t\t\t\t\"ordinalSuffix\"\n\t\t\t];\n\t\t\tfor (i=0; i < RTokenKeys.length; i++) {\n\t\t\t\tcacheProcessRtoken(RTokenKeys[i], RToken[i], tokens[i], eachToken[i]);\n\t\t\t}\n\n\t\t\tg.MMM = g.MMMM = _.cache(_.process(g.ctoken(\"jan feb mar apr may jun jul aug sep oct nov dec\"), t.month));\n\t\t\tg.ddd = g.dddd = _.cache(_.process(g.ctoken(\"sun mon tue wed thu fri sat\"),\n\t\t\t\tfunction (s) {\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\tthis.weekday = s;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t));\n\n\t\t\tg.day = _fn(g.d, g.dd);\n\t\t\tg.month = _fn(g.M, g.MMM);\n\t\t\tg.year = _fn(g.yyyy, g.yy);\n\n\t\t\tg.mdy = _setfn(g.ddd, g.month, g.day, g.year);\n\t\t\tg.ymd = _setfn(g.ddd, g.year, g.month, g.day);\n\t\t\tg.dmy = _setfn(g.ddd, g.day, g.month, g.year);\n\t\t\t\t\t\t\n\t\t\tg.date = function (s) {\n\t\t\t\treturn ((g[Date.CultureInfo.dateElementOrder] || g.mdy).call(this, s));\n\t\t\t};\n\t\t },\n\t\t relative: function () {\n\t\t\t// relative date / time expressions\n\t\t\tg.orientation = _.process(g.ctoken(\"past future\"),\n\t\t\t\tfunction (s) {\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\tthis.orient = s;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tg.operator = _.process(g.ctoken(\"add subtract\"),\n\t\t\t\tfunction (s) {\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\tthis.operator = s;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t);\n\t\t\tg.rday = _.process(g.ctoken(\"yesterday tomorrow today now\"), t.rday);\n\t\t\tg.unit = _.process(g.ctoken(\"second minute hour day week month year\"),\n\t\t\t\tfunction (s) {\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\tthis.unit = s;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t);\n\t\t }\n\t};\n\n\tg.buildGrammarFormats = function () {\n\t\t// these need to be rebuilt every time the language changes.\n\t\t_C = {};\n\n\t\tgrammarFormats.timeFormats();\n\t\tgrammarFormats.dateFormats();\n\t\tgrammarFormats.relative();\n\n\t\t\n\t\tg.value = _.process(_.rtoken(/^([-+]?\\d+)?(st|nd|rd|th)?/),\n\t\t\tfunction (s) {\n\t\t\t\treturn function () {\n\t\t\t\t\tthis.value = s.replace(/\\D/g, \"\");\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t\tg.expression = _.set([g.rday, g.operator, g.value, g.unit, g.orientation, g.ddd, g.MMM ]);\n\n\t\tg.format = _.process(_.many(\n\t\t\t_.any(\n\t\t\t\t// translate format specifiers into grammar rules\n\t\t\t\t_.process(\n\t\t\t\t\t_.rtoken(/^(dd?d?d?(?!e)|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),\n\t\t\t\t\t\tfunction (fmt) {\n\t\t\t\t\t\t\tif (g[fmt]) {\n\t\t\t\t\t\t\t\treturn g[fmt];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow $D.Parsing.Exception(fmt);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t),\n\t\t\t\t\t// translate separator tokens into token rules\n\t\t\t\t\t_.process(_.rtoken(/^[^dMyhHmstz]+/), // all legal separators \n\t\t\t\t\t\tfunction (s) {\n\t\t\t\t\t\t\treturn _.ignore(_.stoken(s));\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t),\n\t\t\t// construct the parser ...\n\t\t\tfunction (rules) {\n\t\t\t\treturn _.process(_.each.apply(null, rules), t.finishExact);\n\t\t\t}\n\t\t);\n\n\t\t// starting rule for general purpose grammar\n\t\tg._start = _.process(_.set([ g.date, g.time, g.expression ],\n\t\tg.generalDelimiter, g.whiteSpace), t.finish);\n\t};\n\n\tg.buildGrammarFormats();\n\t// parsing date format specifiers - ex: \"h:m:s tt\" \n\t// this little guy will generate a custom parser based\n\t// on the format string, ex: g.format(\"h:m:s tt\")\n\t// check for these formats first\n\tg._formats = g.formats([\n\t\t\"\\\"yyyy-MM-ddTHH:mm:ssZ\\\"\",\n\t\t\"yyyy-MM-ddTHH:mm:ss.sz\",\n\t\t\"yyyy-MM-ddTHH:mm:ssZ\",\n\t\t\"yyyy-MM-ddTHH:mm:ssz\",\n\t\t\"yyyy-MM-ddTHH:mm:ss\",\n\t\t\"yyyy-MM-ddTHH:mmZ\",\n\t\t\"yyyy-MM-ddTHH:mmz\",\n\t\t\"yyyy-MM-ddTHH:mm\",\n\t\t\"ddd, MMM dd, yyyy H:mm:ss tt\",\n\t\t\"ddd MMM d yyyy HH:mm:ss zzz\",\n\t\t\"MMddyyyy\",\n\t\t\"ddMMyyyy\",\n\t\t\"Mddyyyy\",\n\t\t\"ddMyyyy\",\n\t\t\"Mdyyyy\",\n\t\t\"dMyyyy\",\n\t\t\"yyyy\",\n\t\t\"Mdyy\",\n\t\t\"dMyy\",\n\t\t\"d\"\n\t]);\n\t\n\t// real starting rule: tries selected formats first, \n\t// then general purpose rule\n\tg.start = function (s) {\n\t\ttry {\n\t\t\tvar r = g._formats.call({}, s);\n\t\t\tif (r[1].length === 0) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t} catch (e) {}\n\t\treturn g._start.call({}, s);\n\t};\n}());","(function () {\r\n\tvar $D = Date;\r\n\r\n\t/**\r\n\t * @desc Converts the specified string value into its JavaScript Date equivalent using CultureInfo specific format information.\r\n\t * \r\n\t * Example\r\n\t<pre><code>\r\n\t///////////\r\n\t// Dates //\r\n\t///////////\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"10/15/2004\");\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"15-Oct-2004\");\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"2004.10.15\");\r\n\r\n\t//Fri Oct 15, 2004\r\n\tvar d1 = Date.parse(\"Fri Oct 15, 2004\");\r\n\r\n\t///////////\r\n\t// Times //\r\n\t///////////\r\n\r\n\t// Today at 10 PM.\r\n\tvar d1 = Date.parse(\"10 PM\");\r\n\r\n\t// Today at 10:30 PM.\r\n\tvar d1 = Date.parse(\"10:30 P.M.\");\r\n\r\n\t// Today at 6 AM.\r\n\tvar d1 = Date.parse(\"06am\");\r\n\r\n\t/////////////////////\r\n\t// Dates and Times //\r\n\t/////////////////////\r\n\r\n\t// 8-July-2004 @ 10:30 PM\r\n\tvar d1 = Date.parse(\"July 8th, 2004, 10:30 PM\");\r\n\r\n\t// 1-July-2004 @ 10:30 PM\r\n\tvar d1 = Date.parse(\"2004-07-01T22:30:00\");\r\n\r\n\t////////////////////\r\n\t// Relative Dates //\r\n\t////////////////////\r\n\r\n\t// Returns today's date. The string \"today\" is culture specific.\r\n\tvar d1 = Date.parse(\"today\");\r\n\r\n\t// Returns yesterday's date. The string \"yesterday\" is culture specific.\r\n\tvar d1 = Date.parse(\"yesterday\");\r\n\r\n\t// Returns the date of the next thursday.\r\n\tvar d1 = Date.parse(\"Next thursday\");\r\n\r\n\t// Returns the date of the most previous monday.\r\n\tvar d1 = Date.parse(\"last monday\");\r\n\r\n\t// Returns today's day + one year.\r\n\tvar d1 = Date.parse(\"next year\");\r\n\r\n\t///////////////\r\n\t// Date Math //\r\n\t///////////////\r\n\r\n\t// Today + 2 days\r\n\tvar d1 = Date.parse(\"t+2\");\r\n\r\n\t// Today + 2 days\r\n\tvar d1 = Date.parse(\"today + 2 days\");\r\n\r\n\t// Today + 3 months\r\n\tvar d1 = Date.parse(\"t+3m\");\r\n\r\n\t// Today - 1 year\r\n\tvar d1 = Date.parse(\"today - 1 year\");\r\n\r\n\t// Today - 1 year\r\n\tvar d1 = Date.parse(\"t-1y\"); \r\n\r\n\r\n\t/////////////////////////////\r\n\t// Partial Dates and Times //\r\n\t/////////////////////////////\r\n\r\n\t// July 15th of this year.\r\n\tvar d1 = Date.parse(\"July 15\");\r\n\r\n\t// 15th day of current day and year.\r\n\tvar d1 = Date.parse(\"15\");\r\n\r\n\t// July 1st of current year at 10pm.\r\n\tvar d1 = Date.parse(\"7/1 10pm\");\r\n\t</code></pre>\r\n\t *\r\n\t * @param {String}   The string value to convert into a Date object [Required]\r\n\t * @return {Date}    A Date object or null if the string cannot be converted into a Date.\r\n\t */\r\n\tvar parseUtils = {\r\n\t\tremoveOrds: function (s) {\r\n\t\t\tords = s.match(/\\b(\\d+)(?:st|nd|rd|th)\\b/); // find ordinal matches\r\n\t\t\ts = ((ords && ords.length === 2) ? s.replace(ords[0], ords[1]) : s);\r\n\t\t\treturn s;\r\n\t\t},\r\n\t\tgrammarParser: function (s) {\r\n\t\t\tvar r = null;\r\n\t\t\ttry {\r\n\t\t\t\tr = $D.Grammar.start.call({}, s.replace(/^\\s*(\\S*(\\s+\\S+)*)\\s*$/, \"$1\"));\r\n\t\t\t} catch (e) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn ((r[1].length === 0) ? r[0] : null);\r\n\t\t},\r\n\t\tnativeFallback: function(s) {\r\n\t\t\tvar t;\r\n\t\t\ttry {\r\n\t\t\t\t// ok we haven't parsed it, last ditch attempt with the built-in parser.\r\n\t\t\t\tt = Date._parse(s);\r\n\t\t\t\treturn (t || t === 0) ? new Date(t) : null;\r\n\t\t\t} catch (e) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tfunction parse (s) {\r\n\t\tvar d;\r\n\t\tif (!s) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (s instanceof Date) {\r\n\t\t\treturn s.clone();\r\n\t\t}\r\n\t\tif (s.length >= 4 && s.charAt(0) !== \"0\" && s.charAt(0) !== \"+\"&& s.charAt(0) !== \"-\") { // ie: 2004 will pass, 0800 won't.\r\n\t\t\t//  Start with specific formats\r\n\t\t\td = $D.Parsing.ISO.parse(s) || $D.Parsing.Numeric.parse(s);\r\n\t\t}\r\n\t\tif (d instanceof Date && !isNaN(d.getTime())) {\r\n\t\t\treturn d;\r\n\t\t} else {\r\n\t\t\t// find ordinal dates (1st, 3rd, 8th, etc and remove them as they cause parsing issues)\r\n\t\t\ts = $D.Parsing.Normalizer.parse(parseUtils.removeOrds(s));\r\n\t\t\td = parseUtils.grammarParser(s);\r\n\t\t\tif (d !== null) {\r\n\t\t\t\treturn d;\r\n\t\t\t} else {\r\n\t\t\t\treturn parseUtils.nativeFallback(s);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (!$D._parse) {\r\n\t\t$D._parse = $D.parse;\r\n\t}\r\n\t$D.parse = parse;\r\n\r\n\tDate.getParseFunction = function (fx) {\r\n\t\tvar fns = Date.Grammar.allformats(fx);\r\n\t\treturn function (s) {\r\n\t\t\tvar r = null;\r\n\t\t\tfor (var i = 0; i < fns.length; i++) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tr = fns[i].call({}, s);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (r[1].length === 0) {\r\n\t\t\t\t\treturn r[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t};\r\n\t\r\n\t/**\r\n\t * Converts the specified string value into its JavaScript Date equivalent using the specified format {String} or formats {Array} and the CultureInfo specific format information.\r\n\t * The format of the string value must match one of the supplied formats exactly.\r\n\t * \r\n\t * Example\r\n\t<pre><code>\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parseExact(\"10/15/2004\", \"M/d/yyyy\");\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"15-Oct-2004\", \"M-ddd-yyyy\");\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"2004.10.15\", \"yyyy.MM.dd\");\r\n\r\n\t// Multiple formats\r\n\tvar d1 = Date.parseExact(\"10/15/2004\", [\"M/d/yyyy\", \"MMMM d, yyyy\"]);\r\n\t</code></pre>\r\n\t *\r\n\t * @param {String}   The string value to convert into a Date object [Required].\r\n\t * @param {Object}   The expected format {String} or an array of expected formats {Array} of the date string [Required].\r\n\t * @return {Date}    A Date object or null if the string cannot be converted into a Date.\r\n\t */\r\n\t$D.parseExact = function (s, fx) {\r\n\t\treturn $D.getParseFunction(fx)(s);\r\n\t};\r\n}());\r\n","(function () {\r\n\tvar $D = Date,\r\n\t\t$P = $D.prototype,\r\n\t\t// $C = $D.CultureInfo, // not used atm\r\n\t\tp = function (s, l) {\r\n\t\t\tif (!l) {\r\n\t\t\t\tl = 2;\r\n\t\t\t}\r\n\t\t\treturn (\"000\" + s).slice(l * -1);\r\n\t\t};\r\n\t/**\r\n\t * Converts a PHP format string to Java/.NET format string.\r\n\t * A PHP format string can be used with ._format or .format.\r\n\t * A Java/.NET format string can be used with .toString().\r\n\t * The .parseExact function will only accept a Java/.NET format string\r\n\t *\r\n\t * Example\r\n\t * var f1 = \"%m/%d/%y\"\r\n\t * var f2 = Date.normalizeFormat(f1);\t// \"MM/dd/yy\"\r\n\t *\r\n\t * new Date().format(f1);\t// \"04/13/08\"\r\n\t * new Date()._format(f1);\t// \"04/13/08\"\r\n\t * new Date().toString(f2);\t// \"04/13/08\"\r\n\t *\r\n\t * var date = Date.parseExact(\"04/13/08\", f2); // Sun Apr 13 2008\r\n\t *\r\n\t * @param {String}   A PHP format string consisting of one or more format spcifiers.\r\n\t * @return {String}  The PHP format converted to a Java/.NET format string.\r\n\t */\r\n\t var normalizerSubstitutions = {\r\n\t\t\"d\" : \"dd\",\r\n\t\t\"%d\": \"dd\",\r\n\t\t\"D\" : \"ddd\",\r\n\t\t\"%a\": \"ddd\",\r\n\t\t\"j\" : \"dddd\",\r\n\t\t\"l\" : \"dddd\",\r\n\t\t\"%A\": \"dddd\",\r\n\t\t\"S\" : \"S\",\r\n\t\t\"F\" : \"MMMM\",\r\n\t\t\"%B\": \"MMMM\",\r\n\t\t\"m\" : \"MM\",\r\n\t\t\"%m\": \"MM\",\r\n\t\t\"M\" : \"MMM\",\r\n\t\t\"%b\": \"MMM\",\r\n\t\t\"%h\": \"MMM\",\r\n\t\t\"n\" : \"M\",\r\n\t\t\"Y\" : \"yyyy\",\r\n\t\t\"%Y\": \"yyyy\",\r\n\t\t\"y\" : \"yy\",\r\n\t\t\"%y\": \"yy\",\r\n\t\t\"g\" : \"h\",\r\n\t\t\"%I\": \"h\",\r\n\t\t\"G\" : \"H\",\r\n\t\t\"h\" : \"hh\",\r\n\t\t\"H\" : \"HH\",\r\n\t\t\"%H\": \"HH\",\r\n\t\t\"i\" : \"mm\",\r\n\t\t\"%M\": \"mm\",\r\n\t\t\"s\" : \"ss\",\r\n\t\t\"%S\": \"ss\",\r\n\t\t\"%r\": \"hh:mm tt\",\r\n\t\t\"%R\": \"H:mm\",\r\n\t\t\"%T\": \"H:mm:ss\",\r\n\t\t\"%X\": \"t\",\r\n\t\t\"%x\": \"d\",\r\n\t\t\"%e\": \"d\",\r\n\t\t\"%D\": \"MM/dd/yy\",\r\n\t\t\"%n\": \"\\\\n\",\r\n\t\t\"%t\": \"\\\\t\",\r\n\t\t\"e\" : \"z\",\r\n\t\t\"T\" : \"z\",\r\n\t\t\"%z\": \"z\",\r\n\t\t\"%Z\": \"z\",\r\n\t\t\"Z\" : \"ZZ\",\r\n\t\t\"N\" : \"u\",\r\n\t\t\"w\" : \"u\",\r\n\t\t\"%w\": \"u\",\r\n\t\t\"W\" : \"W\",\r\n\t\t\"%V\": \"W\"\r\n\t};\r\n\tvar normalizer = {\r\n\t\tsubstitutes: function (m) {\r\n\t\t\treturn normalizerSubstitutions[m];\r\n\t\t},\r\n\t\tinterpreted: function (m, x) {\r\n\t\t\tvar y;\r\n\t\t\tswitch (m) {\r\n\t\t\t\tcase \"%u\":\r\n\t\t\t\t\treturn x.getDay() + 1;\r\n\t\t\t\tcase \"z\":\r\n\t\t\t\t\treturn x.getOrdinalNumber();\r\n\t\t\t\tcase \"%j\":\r\n\t\t\t\t\treturn p(x.getOrdinalNumber(), 3);\r\n\t\t\t\tcase \"%U\":\r\n\t\t\t\t\tvar d1 = x.clone().set({month: 0, day: 1}).addDays(-1).moveToDayOfWeek(0),\r\n\t\t\t\t\t\td2 = x.clone().addDays(1).moveToDayOfWeek(0, -1);\r\n\t\t\t\t\treturn (d2 < d1) ? \"00\" : p((d2.getOrdinalNumber() - d1.getOrdinalNumber()) / 7 + 1);\r\n\r\n\t\t\t\tcase \"%W\":\r\n\t\t\t\t\treturn p(x.getWeek());\r\n\t\t\t\tcase \"t\":\r\n\t\t\t\t\treturn $D.getDaysInMonth(x.getFullYear(), x.getMonth());\r\n\t\t\t\tcase \"o\":\r\n\t\t\t\tcase \"%G\":\r\n\t\t\t\t\treturn x.setWeek(x.getISOWeek()).toString(\"yyyy\");\r\n\t\t\t\tcase \"%g\":\r\n\t\t\t\t\treturn x._format(\"%G\").slice(-2);\r\n\t\t\t\tcase \"a\":\r\n\t\t\t\tcase \"%p\":\r\n\t\t\t\t\treturn t(\"tt\").toLowerCase();\r\n\t\t\t\tcase \"A\":\r\n\t\t\t\t\treturn t(\"tt\").toUpperCase();\r\n\t\t\t\tcase \"u\":\r\n\t\t\t\t\treturn p(x.getMilliseconds(), 3);\r\n\t\t\t\tcase \"I\":\r\n\t\t\t\t\treturn (x.isDaylightSavingTime()) ? 1 : 0;\r\n\t\t\t\tcase \"O\":\r\n\t\t\t\t\treturn x.getUTCOffset();\r\n\t\t\t\tcase \"P\":\r\n\t\t\t\t\ty = x.getUTCOffset();\r\n\t\t\t\t\treturn y.substring(0, y.length - 2) + \":\" + y.substring(y.length - 2);\r\n\t\t\t\tcase \"B\":\r\n\t\t\t\t\tvar now = new Date();\r\n\t\t\t\t\treturn Math.floor(((now.getHours() * 3600) + (now.getMinutes() * 60) + now.getSeconds() + (now.getTimezoneOffset() + 60) * 60) / 86.4);\r\n\t\t\t\tcase \"c\":\r\n\t\t\t\t\treturn x.toISOString().replace(/\\\"/g, \"\");\r\n\t\t\t\tcase \"U\":\r\n\t\t\t\t\treturn $D.strtotime(\"now\");\r\n\t\t\t\tcase \"%c\":\r\n\t\t\t\t\treturn t(\"d\") + \" \" + t(\"t\");\r\n\t\t\t\tcase \"%C\":\r\n\t\t\t\t\treturn Math.floor(x.getFullYear() / 100 + 1);\r\n\t\t\t}\r\n\t\t},\r\n\t\tshouldOverrideDefaults: function (m) {\r\n\t\t\tswitch (m) {\r\n\t\t\t\tcase \"%e\":\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\t\tparse: function (m, context) {\r\n\t\t\tvar formatString, c = context || new Date();\r\n\t\t\tformatString = normalizer.substitutes(m);\r\n\t\t\tif (formatString) {\r\n\t\t\t\treturn formatString;\r\n\t\t\t}\r\n\t\t\tformatString = normalizer.interpreted(m, c);\r\n\r\n\t\t\tif (formatString) {\r\n\t\t\t\treturn formatString;\r\n\t\t\t} else {\r\n\t\t\t\treturn m;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t$D.normalizeFormat = function (format, context) {\r\n\t\treturn format.replace(/(%|\\\\)?.|%%/g, function(t){\r\n\t\t\t\treturn normalizer.parse(t, context);\r\n\t\t});\r\n\t};\r\n\t/**\r\n\t * Format a local Unix timestamp according to locale settings\r\n\t *\r\n\t * Example:\r\n\t * Date.strftime(\"%m/%d/%y\", new Date());\t\t// \"04/13/08\"\r\n\t * Date.strftime(\"c\", \"2008-04-13T17:52:03Z\");\t// \"04/13/08\"\r\n\t *\r\n\t * @param {String}   A format string consisting of one or more format spcifiers [Optional].\r\n\t * @param {Number|String}   The number representing the number of seconds that have elapsed since January 1, 1970 (local time).\r\n\t * @return {String}  A string representation of the current Date object.\r\n\t */\r\n\t$D.strftime = function (format, time) {\r\n\t\tvar d = Date.parse(time);\r\n\t\treturn d._format(format);\r\n\t};\r\n\t/**\r\n\t * Parse any textual datetime description into a Unix timestamp.\r\n\t * A Unix timestamp is the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n\t *\r\n\t * Example:\r\n\t * Date.strtotime(\"04/13/08\");\t\t\t\t// 1208044800\r\n\t * Date.strtotime(\"1970-01-01T00:00:00Z\");\t// 0\r\n\t *\r\n\t * @param {String}   A format string consisting of one or more format spcifiers [Optional].\r\n\t * @param {Object}   A string or date object.\r\n\t * @return {String}  A string representation of the current Date object.\r\n\t */\r\n\t$D.strtotime = function (time) {\r\n\t\tvar d = $D.parse(time);\r\n\t\treturn Math.round($D.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()) / 1000);\r\n\t};\r\n\t/**\r\n\t * Converts the value of the current Date object to its equivalent string representation using a PHP/Unix style of date format specifiers.\r\n\t * Format Specifiers\r\n\t * Format  Description\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExample\r\n\t * ------  ---------------------------------------------------------------------------\t-----------------------\r\n\t * %a\t\tabbreviated weekday name according to the current localed\t\t\t\t\t\"Mon\" through \"Sun\"\r\n\t * %A\t\tfull weekday name according to the current localed\t\t\t\t\t\t\t\"Sunday\" through \"Saturday\"\r\n\t * %b\t\tabbreviated month name according to the current localed\t\t\t\t\t\t\"Jan\" through \"Dec\"\r\n\t * %B\t\tfull month name according to the current locale\t\t\t\t\t\t\t\t\"January\" through \"December\"\r\n\t * %c\t\tpreferred date and time representation for the current locale\t\t\t\t\"4/13/2008 12:33 PM\"\r\n\t * %C\t\tcentury number (the year divided by 100 and truncated to an integer)\t\t\"00\" to \"99\"\r\n\t * %d\t\tday of the month as a decimal number\t\t\t\t\t\t\t\t\t\t\"01\" to \"31\"\r\n\t * %D\t\tsame as %m/%d/%y\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"04/13/08\"\r\n\t * %e\t\tday of the month as a decimal number, a single digit is preceded by a space\t\"1\" to \"31\"\r\n\t * %g\t\tlike %G, but without the century\t\t\t\t\t\t\t\t\t\t\t\"08\"\r\n\t * %G\t\tThe 4-digit year corresponding to the ISO week number (see %V).\t\t\t\t\"2008\"\r\n\t *\t\tThis has the same format and value as %Y, except that if the ISO week number\r\n\t *\t\tbelongs to the previous or next year, that year is used instead.\r\n\t * %h\t\tsame as %b\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Jan\" through \"Dec\"\r\n\t * %H\t\thour as a decimal number using a 24-hour clock.\t\t\t\t\t\t\t\t\"00\" to \"23\"\r\n\t * %I\t\thour as a decimal number using a 12-hour clock.\t\t\t\t\t\t\t\t\"01\" to \"12\"\r\n\t * %j\t\tday of the year as a decimal number.\t\t\t\t\t\t\t\t\t\t\"001\" to \"366\"\r\n\t * %m\t\tmonth as a decimal number.\t\t\t\t\t\t\t\t\t\t\t\t\t\"01\" to \"12\"\r\n\t * %M\t\tminute as a decimal number.\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" to \"59\"\r\n\t * %n\t\tnewline character\t\t\"\\n\"\r\n\t * %p\t\teither \"am\" or \"pm\" according to the given time value, or the\t\t\t\t\"am\" or \"pm\"\r\n\t *\t\tcorresponding strings for the current locale.\r\n\t * %r\t\ttime in a.m. and p.m. notation\t\t\t\t\t\t\t\t\t\t\t\t\"8:44 PM\"\r\n\t * %R\t\ttime in 24 hour notation\t\t\t\t\t\t\t\t\t\t\t\t\t\"20:44\"\r\n\t * %S\t\tsecond as a decimal number\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" to \"59\"\r\n\t * %t\t\ttab character\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\\t\"\r\n\t * %T\t\tcurrent time, equal to %H:%M:%S\t\t\t\t\t\t\t\t\t\t\t\t\"12:49:11\"\r\n\t * %u\t\tweekday as a decimal number [\"1\", \"7\"], with \"1\" representing Monday\t\t\"1\" to \"7\"\r\n\t * %U\t\tweek number of the current year as a decimal number, starting with the\t\t\"0\" to (\"52\" or \"53\")\r\n\t *\t\tfirst Sunday as the first day of the first week\r\n\t * %V\t\tThe ISO 8601:1988 week number of the current year as a decimal number,\t\t\"00\" to (\"52\" or \"53\")\r\n\t *\t\trange 01 to 53, where week 1 is the first week that has at least 4 days\r\n\t *\t\tin the current year, and with Monday as the first day of the week.\r\n\t *\t\t(Use %G or %g for the year component that corresponds to the week number\r\n\t *\t\tfor the specified timestamp.)\r\n\t * %W\t\tweek number of the current year as a decimal number, starting with the\t\t\"00\" to (\"52\" or \"53\")\r\n\t *\t\tfirst Monday as the first day of the first week\r\n\t * %w\t\tday of the week as a decimal, Sunday being \"0\"\t\t\t\t\t\t\t\t\"0\" to \"6\"\r\n\t * %x\t\tpreferred date representation for the current locale without the time\t\t\"4/13/2008\"\r\n\t * %X\t\tpreferred time representation for the current locale without the date\t\t\"12:53:05\"\r\n\t * %y\t\tyear as a decimal number without a century\t\t\t\t\t\t\t\t\t\"00\" \"99\"\r\n\t * %Y\t\tyear as a decimal number including the century\t\t\t\t\t\t\t\t\"2008\"\r\n\t * %Z\t\ttime zone or name or abbreviation\t\t\t\t\t\t\t\t\t\t\t\"UTC\", \"EST\", \"PST\"\r\n\t * %z\t\tsame as %Z\r\n\t * %%\t\ta literal \"%\" characters\t\t\t\t\t\t\t\t\t\t\t\t\t\"%\"\r\n\t * d\t\tDay of the month, 2 digits with leading zeros\t\t\t\t\t\t\t\t\"01\" to \"31\"\r\n\t * D\t\tA textual representation of a day, three letters\t\t\t\t\t\t\t\"Mon\" through \"Sun\"\r\n\t * j\t\tDay of the month without leading zeros\t\t\t\t\t\t\t\t\t\t\"1\" to \"31\"\r\n\t * l\t\tA full textual representation of the day of the week (lowercase \"L\")\t\t\"Sunday\" through \"Saturday\"\r\n\t * N\t\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t\"1\" (for Monday) through \"7\" (for Sunday)\r\n\t * S\t\tEnglish ordinal suffix for the day of the month, 2 characters\t\t\t\t\"st\", \"nd\", \"rd\" or \"th\". Works well with j\r\n\t * w\t\tNumeric representation of the day of the week\t\t\t\t\t\t\t\t\"0\" (for Sunday) through \"6\" (for Saturday)\r\n\t * z\t\tThe day of the year (starting from \"0\")\t\t\t\t\t\t\t\t\t\t\"0\" through \"365\"\r\n\t * W\t\tISO-8601 week number of year, weeks starting on Monday\t\t\t\t\t\t\"00\" to (\"52\" or \"53\")\r\n\t * F\t\tA full textual representation of a month, such as January or March\t\t\t\"January\" through \"December\"\r\n\t * m\t\tNumeric representation of a month, with leading zeros\t\t\t\t\t\t\"01\" through \"12\"\r\n\t * M\t\tA short textual representation of a month, three letters\t\t\t\t\t\"Jan\" through \"Dec\"\r\n\t * n\t\tNumeric representation of a month, without leading zeros\t\t\t\t\t\"1\" through \"12\"\r\n\t * t\t\tNumber of days in the given month\t\t\t\t\t\t\t\t\t\t\t\"28\" through \"31\"\r\n\t * L\t\tWhether it's a leap year\t\t\t\t\t\t\t\t\t\t\t\t\t\"1\" if it is a leap year, \"0\" otherwise\r\n\t * o\t\tISO-8601 year number. This has the same value as Y, except that if the\t\t\"2008\"\r\n\t *\t\tISO week number (W) belongs to the previous or next year, that year\r\n\t *\t\tis used instead.\r\n\t * Y\t\tA full numeric representation of a year, 4 digits\t\t\t\t\t\t\t\"2008\"\r\n\t * y\t\tA two digit representation of a year\t\t\t\t\t\t\t\t\t\t\"08\"\r\n\t * a\t\tLowercase Ante meridiem and Post meridiem\t\t\t\t\t\t\t\t\t\"am\" or \"pm\"\r\n\t * A\t\tUppercase Ante meridiem and Post meridiem\t\t\t\t\t\t\t\t\t\"AM\" or \"PM\"\r\n\t * B\t\tSwatch Internet time\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"000\" through \"999\"\r\n\t * g\t\t12-hour format of an hour without leading zeros\t\t\t\t\t\t\t\t\"1\" through \"12\"\r\n\t * G\t\t24-hour format of an hour without leading zeros\t\t\t\t\t\t\t\t\"0\" through \"23\"\r\n\t * h\t\t12-hour format of an hour with leading zeros\t\t\t\t\t\t\t\t\"01\" through \"12\"\r\n\t * H\t\t24-hour format of an hour with leading zeros\t\t\t\t\t\t\t\t\"00\" through \"23\"\r\n\t * i\t\tMinutes with leading zeros\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" to \"59\"\r\n\t * s\t\tSeconds, with leading zeros\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" through \"59\"\r\n\t * u\t\tMilliseconds\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"54321\"\r\n\t * e\t\tTimezone identifier\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"UTC\", \"EST\", \"PST\"\r\n\t * I\t\tWhether or not the date is in daylight saving time (uppercase i)\t\t\t\"1\" if Daylight Saving Time, \"0\" otherwise\r\n\t * O\t\tDifference to Greenwich time (GMT) in hours\t\t\t\t\t\t\t\t\t\"+0200\", \"-0600\"\r\n\t * P\t\tDifference to Greenwich time (GMT) with colon between hours and minutes\t\t\"+02:00\", \"-06:00\"\r\n\t * T\t\tTimezone abbreviation\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"UTC\", \"EST\", \"PST\"\r\n\t * Z\t\tTimezone offset in seconds. The offset for timezones west of UTC is\t\t\t\"-43200\" through \"50400\"\r\n\t *\t\t\talways negative, and for those east of UTC is always positive.\r\n\t * c\t\tISO 8601 date\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"2004-02-12T15:19:21+00:00\"\r\n\t * r\t\tRFC 2822 formatted date\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Thu, 21 Dec 2000 16:01:07 +0200\"\r\n\t * U\t\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\t\t\t\t\t\"0\"\r\n\t * @param {String}   A format string consisting of one or more format spcifiers [Optional].\r\n\t * @return {String}  A string representation of the current Date object.\r\n\t */\r\n\tvar formatReplace = function (context) {\r\n\t\treturn function (m) {\r\n\t\t\tvar formatString, override = false;\r\n\t\t\tif (m.charAt(0) === \"\\\\\" || m.substring(0, 2) === \"%%\") {\r\n\t\t\t\treturn m.replace(\"\\\\\", \"\").replace(\"%%\", \"%\");\r\n\t\t\t}\r\n\r\n\t\t\toverride = normalizer.shouldOverrideDefaults(m);\r\n\t\t\tformatString = $D.normalizeFormat(m, context);\r\n\t\t\tif (formatString) {\r\n\t\t\t\treturn context.toString(formatString, override);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\t$P._format = function (format) {\r\n\t\tvar formatter = formatReplace(this);\r\n\t\tif (!format) {\r\n\t\t\treturn this._toString();\r\n\t\t} else {\r\n\t\t\treturn format.replace(/(%|\\\\)?.|%%/g, formatter);\r\n\t\t}\r\n\t};\r\n\r\n\tif (!$P.format) {\r\n\t\t$P.format = $P._format;\r\n\t}\r\n}());","(function () {\n\t\n\tvar attrs = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"];\n\tvar gFn = function (attr) {\n\t\treturn function () {\n\t\t\treturn this[attr];\n\t\t};\n\t};\n\t\n\tvar sFn = function (attr) {\n\t\treturn function (val) {\n\t\t\tthis[attr] = val;\n\t\t\treturn this;\n\t\t};\n\t};\n\tvar addSetFuncs = function (context, attrs) {\n\t\tfor (var i = 0; i < attrs.length ; i++) {\n\t\t\tvar $a = attrs[i], $b = $a.slice(0, 1).toUpperCase() + $a.slice(1);\n\t\t\tcontext.prototype[$a] = 0;\n\t\t\tcontext.prototype[\"get\" + $b] = gFn($a);\n\t\t\tcontext.prototype[\"set\" + $b] = sFn($a);\n\t\t}\n\t};\n\n\tvar setMonthsAndYears = function (orient, d1, d2, context) {\n\t\tfunction inc() {\n\t\t\td1.addMonths(-orient);\n\t\t\tcontext.months++;\n\t\t\tif (context.months === 12) {\n\t\t\t\tcontext.years++;\n\t\t\t\tcontext.months = 0;\n\t\t\t}\n\t\t}\n\t\tif (orient === +1) {\n\t\t\twhile (d1 > d2) {\n\t\t\t\tinc();\n\t\t\t}\n\t\t} else {\n\t\t\twhile (d1 < d2) {\n\t\t\t\tinc();\n\t\t\t}\n\t\t}\n\t\tcontext.months--;\n\t\tcontext.months *= orient;\n\t\tcontext.years *= orient;\n\t};\n\n\tvar adjustForDST = function(orient, startDate, endDate) {\n\t\tvar hasDSTMismatch = (false === (startDate.isDaylightSavingTime() === endDate.isDaylightSavingTime()));\n\t\tif (hasDSTMismatch && orient === 1) {\n\t\t\tstartDate.addHours(-1);\n\t\t} else if (hasDSTMismatch) {\n\t\t\tstartDate.addHours(1);\n\t\t}\n\t};\n\t/**\n\t * TimePeriod(startDate, endDate);\n\t * TimePeriod(years, months, days, hours, minutes, seconds, milliseconds);\n\t */\n\tvar TimePeriod = function (years, months, days, hours, minutes, seconds, milliseconds) {\n\t\tif (arguments.length === 7) {\n\t\t\tthis.set(years, months, days, hours, minutes, seconds, milliseconds);\n\t\t} else if (arguments.length === 2 && arguments[0] instanceof Date && arguments[1] instanceof Date) {\n\t\t\tvar startDate = arguments[0].clone();\n\t\t\tvar endDate = arguments[1].clone();\n\t\t\tvar orient = (startDate > endDate) ? +1 : -1;\n\t\t\tthis.dates = {\n\t\t\t\tstart: arguments[0].clone(),\n\t\t\t\tend: arguments[1].clone()\n\t\t\t};\n\n\t\t\tsetMonthsAndYears(orient, startDate, endDate, this);\n\t\t\tadjustForDST(orient, startDate, endDate);\n\t\t\t// // TODO - adjust for DST\n\t\t\tvar diff = endDate - startDate;\n\t\t\tif (diff !== 0) {\n\t\t\t\tvar ts = new TimeSpan(diff);\n\t\t\t\tthis.set(this.years, this.months, ts.getDays(), ts.getHours(), ts.getMinutes(), ts.getSeconds(), ts.getMilliseconds());\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\t// create all the set functions.\n\taddSetFuncs(TimePeriod, attrs);\n\tTimePeriod.prototype.set = function (years, months, days, hours, minutes, seconds, milliseconds){\n\t\tthis.setYears(years || this.getYears());\n\t\tthis.setMonths(months || this.getMonths());\n\t\tthis.setDays(days || this.getDays());\n\t\tthis.setHours(hours || this.getHours());\n\t\tthis.setMinutes(minutes || this.getMinutes());\n\t\tthis.setSeconds(seconds || this.getSeconds());\n\t\tthis.setMilliseconds(milliseconds || this.getMilliseconds());\n\t};\n\n\tDate.TimePeriod = TimePeriod;\n\n\tif (typeof window !== \"undefined\") {\n\t\t// keeping API compatible for v1.x \n\t\twindow.TimePeriod = TimePeriod;\n\t}\n}());","(function () {\n\t\n\tvar gFn = function (attr) {\n\t\treturn function () {\n\t\t\treturn this[attr];\n\t\t};\n\t};\n\t\n\tvar sFn = function (attr) {\n\t\treturn function (val) {\n\t\t\tthis[attr] = val;\n\t\t\treturn this;\n\t\t};\n\t};\n\tvar attrs = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"];\n\tvar addSetFuncs = function (context, attrs) {\n\t\tfor (var i = 0; i < attrs.length ; i++) {\n\t\t\tvar $a = attrs[i], $b = $a.slice(0, 1).toUpperCase() + $a.slice(1);\n\t\t\tcontext.prototype[$a] = 0;\n\t\t\tcontext.prototype[\"get\" + $b] = gFn($a);\n\t\t\tcontext.prototype[\"set\" + $b] = sFn($a);\n\t\t}\n\t};\n\t/**\n\t * new TimeSpan(milliseconds);\n\t * new TimeSpan(days, hours, minutes, seconds);\n\t * new TimeSpan(days, hours, minutes, seconds, milliseconds);\n\t */\n\tvar TimeSpan = function (days, hours, minutes, seconds, milliseconds) {\n\t\tif (arguments.length === 1 && typeof days === \"number\") {\n\t\t\tvar orient = (days < 0) ? -1 : +1;\n\t\t\tvar millsLeft = Math.abs(days);\n\t\t\tthis.setDays(Math.floor(millsLeft / 86400000) * orient);\n\t\t\tmillsLeft = millsLeft % 86400000;\n\t\t\tthis.setHours(Math.floor(millsLeft / 3600000) * orient);\n\t\t\tmillsLeft = millsLeft % 3600000;\n\t\t\tthis.setMinutes(Math.floor(millsLeft / 60000) * orient);\n\t\t\tmillsLeft = millsLeft % 60000;\n\t\t\tthis.setSeconds(Math.floor(millsLeft / 1000) * orient);\n\t\t\tmillsLeft = millsLeft % 1000;\n\t\t\tthis.setMilliseconds(millsLeft * orient);\n\t\t} else {\n\t\t\tthis.set(days, hours, minutes, seconds, milliseconds);\n\t\t}\n\n\t\tthis.getTotalMilliseconds = function () {\n\t\t\treturn\t(this.getDays() * 86400000) +\n\t\t\t\t\t(this.getHours() * 3600000) +\n\t\t\t\t\t(this.getMinutes() * 60000) +\n\t\t\t\t\t(this.getSeconds() * 1000);\n\t\t};\n\t\t\n\t\tthis.compareTo = function (time) {\n\t\t\tvar t1 = new Date(1970, 1, 1, this.getHours(), this.getMinutes(), this.getSeconds()), t2;\n\t\t\tif (time === null) {\n\t\t\t\tt2 = new Date(1970, 1, 1, 0, 0, 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tt2 = new Date(1970, 1, 1, time.getHours(), time.getMinutes(), time.getSeconds());\n\t\t\t}\n\t\t\treturn (t1 < t2) ? -1 : (t1 > t2) ? 1 : 0;\n\t\t};\n\n\t\tthis.equals = function (time) {\n\t\t\treturn (this.compareTo(time) === 0);\n\t\t};\n\n\t\tthis.add = function (time) {\n\t\t\treturn (time === null) ? this : this.addSeconds(time.getTotalMilliseconds() / 1000);\n\t\t};\n\n\t\tthis.subtract = function (time) {\n\t\t\treturn (time === null) ? this : this.addSeconds(-time.getTotalMilliseconds() / 1000);\n\t\t};\n\n\t\tthis.addDays = function (n) {\n\t\t\treturn new TimeSpan(this.getTotalMilliseconds() + (n * 86400000));\n\t\t};\n\n\t\tthis.addHours = function (n) {\n\t\t\treturn new TimeSpan(this.getTotalMilliseconds() + (n * 3600000));\n\t\t};\n\n\t\tthis.addMinutes = function (n) {\n\t\t\treturn new TimeSpan(this.getTotalMilliseconds() + (n * 60000));\n\t\t};\n\n\t\tthis.addSeconds = function (n) {\n\t\t\treturn new TimeSpan(this.getTotalMilliseconds() + (n * 1000));\n\t\t};\n\n\t\tthis.addMilliseconds = function (n) {\n\t\t\treturn new TimeSpan(this.getTotalMilliseconds() + n);\n\t\t};\n\n\t\tthis.get12HourHour = function () {\n\t\t\treturn (this.getHours() > 12) ? this.getHours() - 12 : (this.getHours() === 0) ? 12 : this.getHours();\n\t\t};\n\n\t\tthis.getDesignator = function () {\n\t\t\treturn (this.getHours() < 12) ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator;\n\t\t};\n\n\t\tthis.toString = function (format) {\n\t\t\tthis._toString = function () {\n\t\t\t\tif (this.getDays() !== null && this.getDays() > 0) {\n\t\t\t\t\treturn this.getDays() + \".\" + this.getHours() + \":\" + this.p(this.getMinutes()) + \":\" + this.p(this.getSeconds());\n\t\t\t\t} else {\n\t\t\t\t\treturn this.getHours() + \":\" + this.p(this.getMinutes()) + \":\" + this.p(this.getSeconds());\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tthis.p = function (s) {\n\t\t\t\treturn (s.toString().length < 2) ? \"0\" + s : s;\n\t\t\t};\n\t\t\t\n\t\t\tvar me = this;\n\t\t\t\n\t\t\treturn format ? format.replace(/dd?|HH?|hh?|mm?|ss?|tt?/g,\n\t\t\tfunction (format) {\n\t\t\t\tswitch (format) {\n\t\t\t\tcase \"d\":\n\t\t\t\t\treturn me.getDays();\n\t\t\t\tcase \"dd\":\n\t\t\t\t\treturn me.p(me.getDays());\n\t\t\t\tcase \"H\":\n\t\t\t\t\treturn me.getHours();\n\t\t\t\tcase \"HH\":\n\t\t\t\t\treturn me.p(me.getHours());\n\t\t\t\tcase \"h\":\n\t\t\t\t\treturn me.get12HourHour();\n\t\t\t\tcase \"hh\":\n\t\t\t\t\treturn me.p(me.get12HourHour());\n\t\t\t\tcase \"m\":\n\t\t\t\t\treturn me.getMinutes();\n\t\t\t\tcase \"mm\":\n\t\t\t\t\treturn me.p(me.getMinutes());\n\t\t\t\tcase \"s\":\n\t\t\t\t\treturn me.getSeconds();\n\t\t\t\tcase \"ss\":\n\t\t\t\t\treturn me.p(me.getSeconds());\n\t\t\t\tcase \"t\":\n\t\t\t\t\treturn ((me.getHours() < 12) ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator).substring(0, 1);\n\t\t\t\tcase \"tt\":\n\t\t\t\t\treturn (me.getHours() < 12) ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator;\n\t\t\t\t}\n\t\t\t}\n\t\t\t) : this._toString();\n\t\t};\n\t\treturn this;\n\t};\n\taddSetFuncs(TimeSpan, attrs.slice(2));\n\tTimeSpan.prototype.set = function (days, hours, minutes, seconds, milliseconds){\n\t\tthis.setDays(days || this.getDays());\n\t\tthis.setHours(hours || this.getHours());\n\t\tthis.setMinutes(minutes || this.getMinutes());\n\t\tthis.setSeconds(seconds || this.getSeconds());\n\t\tthis.setMilliseconds(milliseconds || this.getMilliseconds());\n\t};\n\n\n\t/**\n\t * Gets the time of day for this date instances. \n\t * @return {TimeSpan} TimeSpan\n\t */\n\tDate.prototype.getTimeOfDay = function () {\n\t\treturn new TimeSpan(0, this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());\n\t};\n\n\tDate.TimeSpan = TimeSpan;\n\n\tif (typeof window !== \"undefined\" ) {\n\t\t// keeping API compatible for v1.x \n\t\twindow.TimeSpan = TimeSpan;\n\t}\n}());"]}